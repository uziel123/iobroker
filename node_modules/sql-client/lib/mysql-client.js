// Generated by CoffeeScript 1.10.0
(function() {
  var ConnectionFactory, HOMEDIR, LIB_COV, LIB_DIR, MySQLClient, MySQLClientPool, MySQLConnectionFactory, SQLClient, SQLClientPool, fs, mysql, path,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty,
    slice = [].slice;

  fs = require('fs');

  path = require('path');

  HOMEDIR = path.join(__dirname, '..');

  LIB_COV = path.join(HOMEDIR, 'lib-cov');

  LIB_DIR = fs.existsSync(LIB_COV) ? LIB_COV : path.join(HOMEDIR, 'lib');

  SQLClient = require(path.join(LIB_DIR, 'sql-client')).SQLClient;

  SQLClientPool = require(path.join(LIB_DIR, 'sql-client-pool')).SQLClientPool;

  ConnectionFactory = require(path.join(LIB_DIR, 'connection-factory')).ConnectionFactory;

  mysql = require('mysql');

  MySQLConnectionFactory = (function(superClass) {
    extend(MySQLConnectionFactory, superClass);

    function MySQLConnectionFactory() {
      this.open_connection = bind(this.open_connection, this);
      return MySQLConnectionFactory.__super__.constructor.apply(this, arguments);
    }

    MySQLConnectionFactory.prototype.open_connection = function(options, callback) {
      var connection;
      connection = mysql.createConnection(options);
      return connection.connect((function(_this) {
        return function(err) {
          return callback(err, connection);
        };
      })(this));
    };

    return MySQLConnectionFactory;

  })(ConnectionFactory);

  MySQLClient = (function(superClass) {
    extend(MySQLClient, superClass);

    function MySQLClient() {
      var options;
      options = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      MySQLClient.__super__.constructor.apply(this, slice.call(options).concat([new MySQLConnectionFactory()]));
    }

    return MySQLClient;

  })(SQLClient);

  MySQLClientPool = (function(superClass) {
    extend(MySQLClientPool, superClass);

    function MySQLClientPool() {
      var options;
      options = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      MySQLClientPool.__super__.constructor.apply(this, slice.call(options).concat([new MySQLConnectionFactory()]));
    }

    return MySQLClientPool;

  })(SQLClientPool);

  exports.MySQLConnectionFactory = MySQLConnectionFactory;

  exports.MySQLClient = MySQLClient;

  exports.MySQLClientPool = MySQLClientPool;

}).call(this);
