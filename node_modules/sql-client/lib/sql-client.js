// Generated by CoffeeScript 1.10.0
(function() {
  var DEBUG, DEBUG_CONNECT, DEBUG_DDL, SQLClient, ref, ref1, ref2,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    slice = [].slice;

  DEBUG = /(^|,)SQLClient($|,)/i.test(typeof process !== "undefined" && process !== null ? (ref = process.env) != null ? ref.NODE_DEBUG : void 0 : void 0);

  DEBUG_DDL = /(^|,)SQLClient\.DDL($|,)/i.test(typeof process !== "undefined" && process !== null ? (ref1 = process.env) != null ? ref1.NODE_DEBUG : void 0 : void 0);

  DEBUG_CONNECT = /(^|,)SQLClient\.connect($|,)/i.test(typeof process !== "undefined" && process !== null ? (ref2 = process.env) != null ? ref2.NODE_DEBUG : void 0 : void 0);

  SQLClient = (function() {
    function SQLClient() {
      var factory, i, options;
      options = 2 <= arguments.length ? slice.call(arguments, 0, i = arguments.length - 1) : (i = 0, []), factory = arguments[i++];
      this.options = options;
      this.factory = factory;
      this.execute = bind(this.execute, this);
      this.disconnect = bind(this.disconnect, this);
      this.connect = bind(this.connect, this);
      this.created_at = Date.now();
      this.pooled_at = null;
      this.borrowed_at = null;
      this.connected_at = null;
    }

    SQLClient.prototype.connect = function(callback) {
      var ref3;
      if (DEBUG_CONNECT) {
        console.log("SQLClient.connect. @connection? " + (this.connection != null));
      }
      if (this.connection == null) {
        return (ref3 = this.factory).open_connection.apply(ref3, slice.call(this.options).concat([(function(_this) {
          return function(err, connection) {
            if (err != null) {
              return typeof callback === "function" ? callback(err) : void 0;
            } else {
              _this.connection = connection;
              _this.connected_at = Date.now();
              return typeof callback === "function" ? callback() : void 0;
            }
          };
        })(this)]));
      } else {
        return typeof callback === "function" ? callback() : void 0;
      }
    };

    SQLClient.prototype.disconnect = function(callback) {
      if (DEBUG_CONNECT) {
        console.log("SQLClient.disconnect. @connection? " + (this.connection != null));
      }
      if (this.connection != null) {
        return this.factory.close_connection(this.connection, (function(_this) {
          return function(err) {
            if (err != null) {
              return typeof callback === "function" ? callback(err, _this.connection) : void 0;
            } else {
              _this.connection = null;
              _this.connected_at = null;
              return typeof callback === "function" ? callback() : void 0;
            }
          };
        })(this));
      } else {
        return typeof callback === "function" ? callback() : void 0;
      }
    };

    SQLClient.prototype.execute = function(sql, bindvars, callback) {
      if ((callback == null) && typeof bindvars === 'function') {
        callback = bindvars;
        bindvars = null;
      }
      if (this.connection == null) {
        return this.connect((function(_this) {
          return function(err) {
            if (err != null) {
              return callback(err);
            } else {
              return _this.execute(sql, bindvars, callback);
            }
          };
        })(this));
      } else {
        return this.factory.pre_process_sql(sql, bindvars, (function(_this) {
          return function(err, sql, bindvars) {
            if (err != null) {
              return typeof callback === "function" ? callback(err) : void 0;
            } else {
              if (DEBUG && (DEBUG_DDL || !(/^\s((create)|(drop))\s/i.test(sql)))) {
                console.log("SQLClient executing:", sql, bindvars);
              }
              return _this.factory.execute(_this.connection, sql, bindvars, callback);
            }
          };
        })(this));
      }
    };

    return SQLClient;

  })();

  exports.SQLClient = SQLClient;

}).call(this);
