// Generated by CoffeeScript 1.10.0
(function() {
  var ConnectionFactory,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    slice = [].slice;

  ConnectionFactory = (function() {
    function ConnectionFactory() {
      this.pre_process_sql = bind(this.pre_process_sql, this);
      this.execute = bind(this.execute, this);
      this.close_connection = bind(this.close_connection, this);
      this.open_connection = bind(this.open_connection, this);
    }

    ConnectionFactory.prototype.open_connection = function() {
      var callback, i, options;
      options = 2 <= arguments.length ? slice.call(arguments, 0, i = arguments.length - 1) : (i = 0, []), callback = arguments[i++];
      return typeof callback === "function" ? callback(new Error("open_connection not implemented; please override")) : void 0;
    };

    ConnectionFactory.prototype.close_connection = function(connection, callback) {
      if (typeof (connection != null ? connection.end : void 0) === 'function') {
        connection.end();
        return typeof callback === "function" ? callback() : void 0;
      } else if (typeof (connection != null ? connection.close : void 0) === 'function') {
        connection.close();
        return typeof callback === "function" ? callback() : void 0;
      } else {
        return typeof callback === "function" ? callback(new Error("close_connection not implemented; please override")) : void 0;
      }
    };

    ConnectionFactory.prototype.execute = function(connection, sql, bindvars, callback) {
      if (typeof connection.query === 'function') {
        return connection.query(sql, bindvars, callback);
      } else {
        return callback(new Error("execute not implemented; please override"));
      }
    };

    ConnectionFactory.prototype.pre_process_sql = function(sql, bindvars, callback) {
      return callback(null, sql, bindvars);
    };

    return ConnectionFactory;

  })();

  exports.ConnectionFactory = ConnectionFactory;

}).call(this);
