// Generated by CoffeeScript 1.10.0
(function() {
  var HOMEDIR, LIB_COV, LIB_DIR, ObjectUtil, PostgreSQLClient, PostgreSQLRunner, SQLRunner, fs, path,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty,
    slice = [].slice;

  fs = require('fs');

  path = require('path');

  HOMEDIR = path.join(__dirname, '..', '..');

  LIB_COV = path.join(HOMEDIR, 'lib-cov');

  LIB_DIR = fs.existsSync(LIB_COV) ? LIB_COV : path.join(HOMEDIR, 'lib');

  SQLRunner = require(path.join(LIB_DIR, 'sql-runner')).SQLRunner;

  PostgreSQLClient = require(path.join(LIB_DIR, 'postgresql-client')).PostgreSQLClient;

  ObjectUtil = require('inote-util').ObjectUtil;

  PostgreSQLRunner = (function(superClass) {
    extend(PostgreSQLRunner, superClass);

    function PostgreSQLRunner(connect_string, options) {
      this._stringify_results = bind(this._stringify_results, this);
      this._handle_argv = bind(this._handle_argv, this);
      this._get_options = bind(this._get_options, this);
      this.set_client = bind(this.set_client, this);
      var client;
      if ((connect_string != null) && typeof connect_string === 'object' && (options == null)) {
        options = connect_string;
        connect_string = null;
      }
      client = null;
      if (connect_string != null) {
        client = new PostgreSQLClient(connect_string);
      }
      PostgreSQLRunner.__super__.constructor.call(this, client, options);
    }

    PostgreSQLRunner.prototype.set_client = function(client) {
      if (client.execute == null) {
        client = new PostgreSQLClient(client);
      }
      return PostgreSQLRunner.__super__.set_client.call(this, client);
    };

    PostgreSQLRunner.prototype._get_options = function(additional) {
      var pg_opts;
      if (additional == null) {
        additional = {};
      }
      pg_opts = {
        d: {
          alias: 'db',
          describe: "Databse connect string."
        }
      };
      return PostgreSQLRunner.__super__._get_options.call(this, ObjectUtil.merge(pg_opts, additional));
    };

    PostgreSQLRunner.prototype._handle_argv = function(argv) {
      if (argv.db != null) {
        this.set_client(argv.db);
      }
      return PostgreSQLRunner.__super__._handle_argv.call(this, argv);
    };

    PostgreSQLRunner.prototype._stringify_results = function() {
      var ref, results;
      results = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      if ((results != null ? (ref = results[0]) != null ? ref.rows : void 0 : void 0) != null) {
        return JSON.stringify(results[0].rows, null, 2);
      } else {
        return PostgreSQLRunner.__super__._stringify_results.apply(this, results);
      }
    };

    return PostgreSQLRunner;

  })(SQLRunner);

  exports.PostgreSQLRunner = PostgreSQLRunner;

  if (require.main === module) {
    (new PostgreSQLRunner()).main();
  }

}).call(this);
