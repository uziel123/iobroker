{"version":3,"sources":["colResizable-1.6.js"],"names":["$","S","d","document","h","drag","tables","count","ID","PX","SIGNATURE","FLEX","I","parseInt","M","Math","ie","navigator","userAgent","indexOf","sessionStorage","e","append","destroy","t","id","attr","is","removeClass","gc","remove","createGrips","th","find","length","filter","cg","ln","p","memento","each","i","c","this","dc","g","lastChild","opt","gripInnerHtml","addClass","f","html","on","onGripMouseDown","w","width","push","removeAttr","data","last","not","syncGrips","tw","m","aux","flush","split","overflow","css","eq","left","offset","outerWidth","cs","height","headerOnly","outerHeight","syncCols","isOver","inc","x","l","c2","w2","applyBounds","map","onGripDrag","oe","originalEvent","touches","pageX","ox","mw","minWidth","b","min","position","max","Infinity","liveDrag","cb","onDrag","currentTarget","onGripDragOver","off","draggingClass","onResize","o","dragCursor","window","hasOwnProperty","round","mode","fn","extend","colResizable","options","resizeMode","hoverCursor","postbackSafe","marginLeft","marginRight","disable","partialRefresh","disabledColumns","fixed","tb","before","prev","cellSpacing","currentStyle","borderSpacing","border","borderLeftWidth","init","jQuery"],"mappings":"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","file":"colResizable-1.6.min.js","sourcesContent":["/**\r\n               _ _____           _          _     _      \r\n              | |  __ \\         (_)        | |   | |     \r\n      ___ ___ | | |__) |___  ___ _ ______ _| |__ | | ___ \r\n     / __/ _ \\| |  _  // _ \\/ __| |_  / _` | '_ \\| |/ _ \\\r\n    | (_| (_) | | | \\ \\  __/\\__ \\ |/ / (_| | |_) | |  __/\r\n     \\___\\___/|_|_|  \\_\\___||___/_/___\\__,_|_.__/|_|\\___|\r\n\t \r\n\tv1.6 - jQuery plugin created by Alvaro Prieto Lauroba\r\n\t\r\n\tLicences: MIT & GPL\r\n\tFeel free to use or modify this plugin as far as my full name is kept\t\r\n\t\r\n\tIf you are going to use this plug-in in production environments it is \r\n\tstrongly recommended to use its minified version: colResizable.min.js\r\n\r\n*/\r\n\r\n(function($){ \t\r\n\t\r\n\tvar d = $(document); \t\t//window object\r\n\tvar h = $(\"head\");\t\t\t//head object\r\n\tvar drag = null;\t\t\t//reference to the current grip that is being dragged\r\n\tvar tables = {};\t\t\t//object of the already processed tables (table.id as key)\r\n\tvar\tcount = 0;\t\t\t\t//internal count to create unique IDs when needed.\t\r\n\t\r\n\t//common strings for packing\r\n\tvar ID = \"id\";\t\r\n\tvar PX = \"px\";\r\n\tvar SIGNATURE =\"JColResizer\";\r\n    var FLEX = \"JCLRFlex\";\r\n\t\r\n\t//short-cuts\r\n\tvar I = parseInt;\r\n\tvar M = Math;\r\n\tvar ie = navigator.userAgent.indexOf('Trident/4.0')>0;\r\n\tvar S;\r\n\ttry{S = sessionStorage;}catch(e){}\t//Firefox crashes when executed as local file system\r\n\t\r\n\t//append required CSS rules  \r\n    h.append(\"<style type='text/css'>  .JColResizer{table-layout:fixed;} .JColResizer > tbody > tr > td, .JColResizer > tbody > tr > th{overflow:hidden;padding-left:0!important; padding-right:0!important;}  .JCLRgrips{ height:0px; position:relative;} .JCLRgrip{margin-left:-5px; position:absolute; z-index:5; } .JCLRgrip .JColResizer{position:absolute;background-color:red;filter:alpha(opacity=1);opacity:0;width:10px;height:100%;cursor: e-resize;top:0px} .JCLRLastGrip{position:absolute; width:1px; } .JCLRgripDrag{ border-left:1px dotted black;\t} .JCLRFlex{width:auto!important;} .JCLRgrip.JCLRdisabledGrip .JColResizer{cursor:default; display:none;}</style>\");\r\n\r\n\t\r\n\t/**\r\n\t * Function to allow column resizing for table objects. It is the starting point to apply the plugin.\r\n\t * @param {DOM node} tb - reference to the DOM table object to be enhanced\r\n\t * @param {Object} options\t- some customization values\r\n\t */\r\n\tvar init = function( tb, options){\t\r\n\t\tvar t = $(tb);\t\t\t\t    //the table object is wrapped\r\n        t.opt = options;                //each table has its own options available at anytime\r\n        t.mode = options.resizeMode;    //shortcuts\r\n        t.dc = t.opt.disabledColumns;\r\n\t\tif(t.opt.disable) return destroy(t);\t\t\t\t//the user is asking to destroy a previously colResized table\r\n\t\tvar\tid = t.id = t.attr(ID) || SIGNATURE+count++;\t//its id is obtained, if null new one is generated\t\t\r\n\t\tt.p = t.opt.postbackSafe; \t\t\t\t\t\t\t//short-cut to detect postback safe \t\t\r\n\t\tif(!t.is(\"table\") || tables[id] && !t.opt.partialRefresh) return; \t\t//if the object is not a table or if it was already processed then it is ignored.\r\n\t\tif (t.opt.hoverCursor !== 'e-resize') h.append(\"<style type='text/css'>.JCLRgrip .JColResizer:hover{cursor:\"+ t.opt.hoverCursor +\"!important}</style>\");  //if hoverCursor has been set, append the style\r\n\t\tt.addClass(SIGNATURE).attr(ID, id).before('<div class=\"JCLRgrips\"/>');\t//the grips container object is added. Signature class forces table rendering in fixed-layout mode to prevent column's min-width\r\n\t\tt.g = []; t.c = []; t.w = t.width(); t.gc = t.prev(); t.f=t.opt.fixed;\t//t.c and t.g are arrays of columns and grips respectively\t\t\t\t\r\n\t\tif(options.marginLeft) t.gc.css(\"marginLeft\", options.marginLeft);  \t//if the table contains margins, it must be specified\r\n\t\tif(options.marginRight) t.gc.css(\"marginRight\", options.marginRight);  \t//since there is no (direct) way to obtain margin values in its original units (%, em, ...)\r\n\t\tt.cs = I(ie? tb.cellSpacing || tb.currentStyle.borderSpacing :t.css('border-spacing'))||2;\t//table cellspacing (not even jQuery is fully cross-browser)\r\n\t\tt.b  = I(ie? tb.border || tb.currentStyle.borderLeftWidth :t.css('border-left-width'))||1;\t//outer border width (again cross-browser issues)\r\n\t\t// if(!(tb.style.width || tb.width)) t.width(t.width()); //I am not an IE fan at all, but it is a pity that only IE has the currentStyle attribute working as expected. For this reason I can not check easily if the table has an explicit width or if it is rendered as \"auto\"\r\n\t\ttables[id] = t; \t//the table object is stored using its id as key\t\r\n\t\tcreateGrips(t);\t\t//grips are created \r\n\t\r\n\t};\r\n\r\n\r\n\t/**\r\n\t * This function allows to remove any enhancements performed by this plugin on a previously processed table.\r\n\t * @param {jQuery ref} t - table object\r\n\t */\r\n\tvar destroy = function(t){\r\n\t\tvar id=t.attr(ID), t=tables[id];\t\t//its table object is found\r\n\t\tif(!t||!t.is(\"table\")) return;\t\t\t//if none, then it wasn't processed\t \r\n\t\tt.removeClass(SIGNATURE+\" \"+FLEX).gc.remove();\t//class and grips are removed\r\n\t\tdelete tables[id];\t\t\t\t\t\t//clean up data\r\n\t};\r\n\r\n\r\n\t/**\r\n\t * Function to create all the grips associated with the table given by parameters \r\n\t * @param {jQuery ref} t - table object\r\n\t */\r\n\tvar createGrips = function(t){\t\r\n\t\r\n        var th = t.find(\">thead>tr:first>th,>thead>tr:first>td\"); //table headers are obtained\r\n\t\tif(!th.length) th = t.find(\">tbody>tr:first>th,>tr:first>th,>tbody>tr:first>td, >tr:first>td\");\t //but headers can also be included in different ways\r\n\t\tth = th.filter(\":visible\");\t\t\t\t\t//filter invisible columns\r\n\t\tt.cg = t.find(\"col\"); \t\t\t\t\t\t//a table can also contain a colgroup with col elements\t\t\r\n\t\tt.ln = th.length;\t\t\t\t\t\t\t//table length is stored\t\r\n\t\tif(t.p && S && S[t.id])memento(t,th);\t\t//if 'postbackSafe' is enabled and there is data for the current table, its coloumn layout is restored\r\n\t\tth.each(function(i){\t\t\t\t\t\t//iterate through the table column headers\t\t\t\r\n\t\t\tvar c = $(this); \t\t\t\t\t\t//jquery wrap for the current column\t\t\r\n            var dc = t.dc.indexOf(i)!=-1;           //is this a disabled column?\r\n\t\t\tvar g = $(t.gc.append('<div class=\"JCLRgrip\"></div>')[0].lastChild); //add the visual node to be used as grip\r\n            g.append(dc ? \"\": t.opt.gripInnerHtml).append('<div class=\"'+SIGNATURE+'\"></div>');\r\n            if(i == t.ln-1){                        //if the current grip is the las one \r\n                g.addClass(\"JCLRLastGrip\");         //add a different css class to stlye it in a different way if needed\r\n                if(t.f) g.html(\"\");                 //if the table resizing mode is set to fixed, the last grip is removed since table with can not change\r\n            }\r\n            g.on('touchstart mousedown', onGripMouseDown); //bind the mousedown event to start dragging \r\n            \r\n            if (!dc){ \r\n                //if normal column bind the mousedown event to start dragging, if disabled then apply its css class\r\n                g.removeClass('JCLRdisabledGrip').on('touchstart mousedown', onGripMouseDown);      \r\n            }else{\r\n                g.addClass('JCLRdisabledGrip'); \r\n            }\r\n\r\n\t\t\tg.t = t; g.i = i; g.c = c;\tc.w =c.width();\t\t//some values are stored in the grip's node data as shortcut\r\n\t\t\tt.g.push(g); t.c.push(c);\t\t\t\t\t\t//the current grip and column are added to its table object\r\n\t\t\tc.width(c.w).removeAttr(\"width\");\t\t\t\t//the width of the column is converted into pixel-based measurements\r\n\t\t\tg.data(SIGNATURE, {i:i, t:t.attr(ID), last: i == t.ln-1});\t //grip index and its table name are stored in the HTML \t\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t}); \t\r\n\t\tt.cg.removeAttr(\"width\");\t//remove the width attribute from elements in the colgroup \r\n\r\n\t\tt.find('td, th').not(th).not('table th, table td').each(function(){  \r\n\t\t\t$(this).removeAttr('width');\t//the width attribute is removed from all table cells which are not nested in other tables and dont belong to the header\r\n\t\t});\t\t\r\n        if(!t.f){\r\n            t.removeAttr('width').addClass(FLEX); //if not fixed, let the table grow as needed\r\n        }\r\n        syncGrips(t); \t\t\t\t//the grips are positioned according to the current table layout\t\t\t\r\n        //there is a small problem, some cells in the table could contain dimension values interfering with the \r\n        //width value set by this plugin. Those values are removed\r\n\t\t\r\n\t};\r\n\t\r\n    \r\n\t/**\r\n\t * Function to allow the persistence of columns dimensions after a browser postback. It is based in\r\n\t * the HTML5 sessionStorage object, which can be emulated for older browsers using sessionstorage.js\r\n\t * @param {jQuery ref} t - table object\r\n\t * @param {jQuery ref} th - reference to the first row elements (only set in deserialization)\r\n\t */\r\n\tvar memento = function(t, th){ \r\n\t\tvar w,m=0,i=0,aux =[],tw;\r\n\t\tif(th){\t\t\t\t\t\t\t\t\t\t//in deserialization mode (after a postback)\r\n\t\t\tt.cg.removeAttr(\"width\");\r\n\t\t\tif(t.opt.flush){ S[t.id] =\"\"; return;} \t//if flush is activated, stored data is removed\r\n\t\t\tw = S[t.id].split(\";\");\t\t\t\t\t//column widths is obtained\r\n\t\t\ttw = w[t.ln+1];\r\n            if(!t.f && tw){\t\t\t\t\t\t\t//if not fixed and table width data available its size is restored\r\n                t.width(tw*=1);\r\n                if(t.opt.overflow) {\t\t\t\t//if overfolw flag is set, restore table width also as table min-width\r\n                    t.css('min-width', tw + PX);\r\n                    t.w = tw;\r\n                }\r\n            }\r\n\t\t\tfor(;i<t.ln;i++){\t\t\t\t\t\t//for each column\r\n\t\t\t\taux.push(100*w[i]/w[t.ln]+\"%\"); \t//width is stored in an array since it will be required again a couple of lines ahead\r\n\t\t\t\tth.eq(i).css(\"width\", aux[i] ); \t//each column width in % is restored\r\n\t\t\t}\t\t\t\r\n\t\t\tfor(i=0;i<t.ln;i++)\r\n\t\t\t\tt.cg.eq(i).css(\"width\", aux[i]);\t//this code is required in order to create an inline CSS rule with higher precedence than an existing CSS class in the \"col\" elements\r\n\t\t}else{\t\t\t\t\t\t\t//in serialization mode (after resizing a column)\r\n\t\t\tS[t.id] =\"\";\t\t\t\t//clean up previous data\r\n\t\t\tfor(;i < t.c.length; i++){\t//iterate through columns\r\n\t\t\t\tw = t.c[i].width();\t\t//width is obtained\r\n\t\t\t\tS[t.id] += w+\";\";\t\t//width is appended to the sessionStorage object using ID as key\r\n\t\t\t\tm+=w;\t\t\t\t\t//carriage is updated to obtain the full size used by columns\r\n\t\t\t}\r\n\t\t\tS[t.id]+=m;\t\t\t\t\t\t\t//the last item of the serialized string is the table's active area (width), \r\n\t\t\t\t\t\t\t\t\t\t\t\t//to be able to obtain % width value of each columns while deserializing\r\n\t\t\tif(!t.f) S[t.id] += \";\"+t.width(); \t//if not fixed, table width is stored\r\n\t\t}\t\r\n\t};\r\n\t\r\n\t\r\n\t/**\r\n\t * Function that places each grip in the correct position according to the current table layout\t \r\n\t * @param {jQuery ref} t - table object\r\n\t */\r\n\tvar syncGrips = function (t){\t\r\n\t\tt.gc.width(t.w);\t\t\t//the grip's container width is updated\t\t\t\t\r\n\t\tfor(var i=0; i<t.ln; i++){\t//for each column\r\n\t\t\tvar c = t.c[i]; \t\t\t\r\n\t\t\tt.g[i].css({\t\t\t//height and position of the grip is updated according to the table layout\r\n\t\t\t\tleft: c.offset().left - t.offset().left + c.outerWidth(false) + t.cs / 2 + PX,\r\n\t\t\t\theight: t.opt.headerOnly? t.c[0].outerHeight(false) : t.outerHeight(false)\t\t\t\t\r\n\t\t\t});\t\t\t\r\n\t\t} \t\r\n\t};\r\n\t\r\n\t\r\n\t\r\n\t/**\r\n\t* This function updates column's width according to the horizontal position increment of the grip being\r\n\t* dragged. The function can be called while dragging if liveDragging is enabled and also from the onGripDragOver\r\n\t* event handler to synchronize grip's position with their related columns.\r\n\t* @param {jQuery ref} t - table object\r\n\t* @param {number} i - index of the grip being dragged\r\n\t* @param {bool} isOver - to identify when the function is being called from the onGripDragOver event\t\r\n\t*/\r\n\tvar syncCols = function(t,i,isOver){\r\n\t\tvar inc = drag.x-drag.l, c = t.c[i], c2 = t.c[i+1]; \t\t\t\r\n\t\tvar w = c.w + inc;\tvar w2= c2.w- inc;\t//their new width is obtained\t\t\t\t\t\r\n\t\tc.width( w + PX);\t\t\t\r\n\t\tt.cg.eq(i).width( w + PX); \r\n        if(t.f){ //if fixed mode\r\n            c2.width(w2 + PX);\r\n            t.cg.eq(i+1).width( w2 + PX);\r\n        }else if(t.opt.overflow) {\t\t\t\t//if overflow is set, incriment min-width to force overflow\r\n            t.css('min-width', t.w + inc);\r\n        }\r\n\t\tif(isOver){\r\n            c.w=w; \r\n            c2.w= t.f ? w2 : c2.w;\r\n        }\r\n\t};\r\n\r\n\t\r\n\t/**\r\n\t* This function updates all columns width according to its real width. It must be taken into account that the \r\n\t* sum of all columns can exceed the table width in some cases (if fixed is set to false and table has some kind \r\n\t* of max-width).\r\n\t* @param {jQuery ref} t - table object\t\r\n\t*/\r\n\tvar applyBounds = function(t){\r\n        var w = $.map(t.c, function(c){\t\t\t//obtain real widths\r\n            return c.width();\r\n        });\r\n        t.width(t.w = t.width()).removeClass(FLEX);\t//prevent table width changes\r\n        $.each(t.c, function(i,c){\r\n            c.width(w[i]).w = w[i];\t\t\t\t//set column widths applying bounds (table's max-width)\r\n        });\r\n\t\tt.addClass(FLEX);\t\t\t\t\t\t//allow table width changes\r\n\t};\r\n\t\r\n\t\r\n\t/**\r\n\t * Event handler used while dragging a grip. It checks if the next grip's position is valid and updates it. \r\n\t * @param {event} e - mousemove event binded to the window object\r\n\t */\r\n\tvar onGripDrag = function(e){\t\r\n\t\tif(!drag) return; \r\n        var t = drag.t;\t\t//table object reference \r\n        var oe = e.originalEvent.touches;\r\n        var ox = oe ? oe[0].pageX : e.pageX;    //original position (touch or mouse)\r\n        var x =  ox - drag.ox + drag.l;\t        //next position according to horizontal mouse position increment\r\n\t\tvar mw = t.opt.minWidth, i = drag.i ;\t//cell's min width\r\n\t\tvar l = t.cs*1.5 + mw + t.b;\r\n        var last = i == t.ln-1;                 \t\t\t//check if it is the last column's grip (usually hidden)\r\n        var min = i? t.g[i-1].position().left+t.cs+mw: l;\t//min position according to the contiguous cells\r\n\t\tvar max = t.f ? \t//fixed mode?\r\n\t\t\ti == t.ln-1? \r\n\t\t\t\tt.w-l: \r\n\t\t\t\tt.g[i+1].position().left-t.cs-mw:\r\n\t\t\tInfinity; \t\t\t\t\t\t\t\t//max position according to the contiguous cells \r\n\t\tx = M.max(min, M.min(max, x));\t\t\t\t//apply bounding\t\t\r\n\t\tdrag.x = x;\t drag.css(\"left\",  x + PX); \t//apply position increment\t\r\n        if(last){\t\t\t\t\t\t\t\t\t//if it is the last grip\r\n            var c = t.c[drag.i];\t\t\t\t\t//width of the last column is obtained\r\n\t\t\tdrag.w = c.w + x- drag.l;         \r\n        }              \r\n\t\tif(t.opt.liveDrag){ \t\t\t//if liveDrag is enabled\r\n\t\t\tif(last){\r\n\t\t\t    c.width(drag.w);\r\n                if(!t.f && t.opt.overflow){\t\t\t//if overflow is set, incriment min-width to force overflow\r\n                   t.css('min-width', t.w + x - drag.l);\r\n                }else {\r\n                    t.w = t.width();\r\n                }\r\n\t\t\t}else{\r\n\t\t\t\tsyncCols(t,i); \t\t\t//columns are synchronized\r\n\t\t\t}\r\n\t\t\tsyncGrips(t);\r\n\t\t\tvar cb = t.opt.onDrag;\t\t\t\t\t\t\t//check if there is an onDrag callback\r\n\t\t\tif (cb) { e.currentTarget = t[0]; cb(e); }\t\t//if any, it is fired\t\t\t\r\n\t\t}\r\n\t\treturn false; \t//prevent text selection while dragging\t\t\t\t\r\n\t};\r\n\t\r\n\r\n\t/**\r\n\t * Event handler fired when the dragging is over, updating table layout\r\n     * @param {event} e - grip's drag over event\r\n\t */\r\n\tvar onGripDragOver = function(e){\t\r\n\t\t\r\n\t\td.off('touchend.'+SIGNATURE+' mouseup.'+SIGNATURE).off('touchmove.'+SIGNATURE+' mousemove.'+SIGNATURE);\r\n\t\t$(\"head :last-child\").remove(); \t\t\t\t//remove the dragging cursor style\t\r\n\t\tif(!drag) return;\r\n\t\tdrag.removeClass(drag.t.opt.draggingClass);\t\t//remove the grip's dragging css-class\r\n        if (!(drag.x - drag.l == 0)) {\r\n            var t = drag.t;\r\n            var cb = t.opt.onResize; \t    //get some values\t\r\n            var i = drag.i;                 //column index\r\n            var last = i == t.ln-1;         //check if it is the last column's grip (usually hidden)\r\n            var c = t.g[i].c;               //the column being dragged\r\n            if(last){\r\n                c.width(drag.w);\r\n                c.w = drag.w;\r\n            }else{\r\n                syncCols(t, i, true);\t//the columns are updated\r\n            }\r\n            if(!t.f) applyBounds(t);\t//if not fixed mode, then apply bounds to obtain real width values\r\n            syncGrips(t);\t\t\t\t//the grips are updated\r\n            if (cb) { e.currentTarget = t[0]; cb(e); }\t//if there is a callback function, it is fired\r\n            if(t.p && S) memento(t); \t//if postbackSafe is enabled and there is sessionStorage support, the new layout is serialized and stored\r\n        }\r\n\t\tdrag = null;   //since the grip's dragging is over\t\t\t\t\t\t\t\t\t\r\n\t};\t\r\n\t\r\n\t\r\n\t/**\r\n\t * Event handler fired when the grip's dragging is about to start. Its main goal is to set up events \r\n\t * and store some values used while dragging.\r\n     * @param {event} e - grip's mousedown event\r\n\t */\r\n\tvar onGripMouseDown = function(e){\r\n\t\tvar o = $(this).data(SIGNATURE);\t\t\t//retrieve grip's data\r\n\t\tvar t = tables[o.t],  g = t.g[o.i];\t\t\t//shortcuts for the table and grip objects\r\n        var oe = e.originalEvent.touches;           //touch or mouse event?\r\n        g.ox = oe? oe[0].pageX: e.pageX;            //the initial position is kept\r\n\t\tg.l = g.position().left;\r\n        g.x = g.l;\r\n        \r\n\t\td.on('touchmove.'+SIGNATURE+' mousemove.'+SIGNATURE, onGripDrag ).on('touchend.'+SIGNATURE+' mouseup.'+SIGNATURE, onGripDragOver);\t//mousemove and mouseup events are bound\r\n\t\th.append(\"<style type='text/css'>*{cursor:\"+ t.opt.dragCursor +\"!important}</style>\"); \t//change the mouse cursor\r\n\t\tg.addClass(t.opt.draggingClass); \t//add the dragging class (to allow some visual feedback)\t\t\t\t\r\n\t\tdrag = g;\t\t\t\t\t\t\t//the current grip is stored as the current dragging object\r\n\t\tif(t.c[o.i].l) for(var i=0,c; i<t.ln; i++){ c=t.c[i]; c.l = false; c.w= c.width(); } \t//if the colum is locked (after browser resize), then c.w must be updated\t\t\r\n\t\treturn false; \t//prevent text selection\r\n\t};\r\n    \r\n    \r\n\t/**\r\n\t * Event handler fired when the browser is resized. The main purpose of this function is to update\r\n\t * table layout according to the browser's size synchronizing related grips \r\n\t */\r\n\tvar onResize = function () {\r\n\t\tfor (var t in tables){\r\n            if (tables.hasOwnProperty(t)) {\r\n                t = tables[t];\r\n                var i, mw=0;\r\n                t.removeClass(SIGNATURE);   //firefox doesn't like layout-fixed in some cases\r\n                if (t.f) {                  //in fixed mode\r\n                    t.w = t.width();        //its new width is kept\r\n                    for(i=0; i<t.ln; i++) mw+= t.c[i].w;\t\t\r\n                    //cell rendering is not as trivial as it might seem, and it is slightly different for\r\n                    //each browser. In the beginning i had a big switch for each browser, but since the code\r\n                    //was extremely ugly now I use a different approach with several re-flows. This works \r\n                    //pretty well but it's a bit slower. For now, lets keep things simple...   \r\n                    for(i=0; i<t.ln; i++) t.c[i].css(\"width\", M.round(1000*t.c[i].w/mw)/10 + \"%\").l=true; \r\n                    //c.l locks the column, telling us that its c.w is outdated\t\t\t\t\t\t\t\t\t\r\n                } else {     //in non fixed-sized tables\r\n                    applyBounds(t);         //apply the new bounds \r\n                    if (t.mode === 'flex' && t.p && S){   //if postbackSafe is enabled and there is sessionStorage support,\r\n                        memento(t);                     //the new layout is serialized and stored for 'flex' tables\r\n                    }\r\n                }\r\n                syncGrips(t.addClass(SIGNATURE));\r\n            }\r\n\t\t} \r\n\t\t\r\n\t};\t\t\r\n\r\n\r\n\t//bind resize event, to update grips position \r\n\t$(window).on('resize.'+SIGNATURE, onResize); \r\n\r\n\r\n\t/**\r\n\t * The plugin is added to the jQuery library\r\n\t * @param {Object} options -  an object that holds some basic customization values \r\n\t */\r\n    $.fn.extend({  \r\n        colResizable: function(options) {           \r\n            var defaults = {\r\n\t\t\t\r\n\t\t\t\t//attributes:\r\n                \r\n                resizeMode: 'fit',              //mode can be 'fit', 'flex' or 'overflow'\r\n                draggingClass: 'JCLRgripDrag',\t//css-class used when a grip is being dragged (for visual feedback purposes)\r\n\t\t\t\tgripInnerHtml: '',\t\t\t\t//if it is required to use a custom grip it can be done using some custom HTML\t\t\t\t\r\n\t\t\t\tliveDrag: false,\t\t\t\t//enables table-layout updating while dragging\t\r\n\t\t\t\tminWidth: 15, \t\t\t\t\t//minimum width value in pixels allowed for a column \r\n\t\t\t\theaderOnly: false,\t\t\t\t//specifies that the size of the the column resizing anchors will be bounded to the size of the first row \r\n\t\t\t\thoverCursor: \"e-resize\",  \t\t//cursor to be used on grip hover\r\n\t\t\t\tdragCursor: \"e-resize\",  \t\t//cursor to be used while dragging\r\n\t\t\t\tpostbackSafe: false, \t\t\t//when it is enabled, table layout can persist after postback or page refresh. It requires browsers with sessionStorage support (it can be emulated with sessionStorage.js). \r\n\t\t\t\tflush: false, \t\t\t\t\t//when postbakSafe is enabled, and it is required to prevent layout restoration after postback, 'flush' will remove its associated layout data \r\n\t\t\t\tmarginLeft: null,\t\t\t\t//in case the table contains any margins, colResizable needs to know the values used, e.g. \"10%\", \"15em\", \"5px\" ...\r\n\t\t\t\tmarginRight: null, \t\t\t\t//in case the table contains any margins, colResizable needs to know the values used, e.g. \"10%\", \"15em\", \"5px\" ...\r\n\t\t\t\tdisable: false,\t\t\t\t\t//disables all the enhancements performed in a previously colResized table\t\r\n\t\t\t\tpartialRefresh: false,\t\t\t//can be used in combination with postbackSafe when the table is inside of an updatePanel,\r\n                disabledColumns: [],            //column indexes to be excluded\r\n\r\n\t\t\t\t//events:\r\n\t\t\t\tonDrag: null, \t\t\t\t\t//callback function to be fired during the column resizing process if liveDrag is enabled\r\n\t\t\t\tonResize: null\t\t\t\t\t//callback function fired when the dragging process is over\r\n            };\r\n\t\t\tvar options =  $.extend(defaults, options);\t\t\r\n            \r\n            //since now there are 3 different ways of resizing columns, I changed the external interface to make it clear\r\n            //calling it 'resizeMode' but also to remove the \"fixed\" attribute which was confusing for many people\r\n            options.fixed = true;\r\n            options.overflow = false;\r\n            switch(options.resizeMode){\r\n                case 'flex': options.fixed = false; break;\r\n                case 'overflow': options.fixed = false; options.overflow = true; break;\r\n            }\r\n\r\n            return this.each(function() {\t\t\t\t\r\n             \tinit( this, options);             \r\n            });\r\n        }\r\n    });\r\n})(jQuery);\r\n\r\n"]}