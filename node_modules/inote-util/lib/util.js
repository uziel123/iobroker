// Generated by CoffeeScript 1.9.3
(function() {
  var ArrayUtil, AsyncUtil, Base64, ColorUtil, ComparatorUtil, DEBUG, DateUtil, ErrorUtil, FileUtil, HOMEDIR, IOUtil, IdUtil, LIB_COV, LIB_DIR, LogUtil, MapUtil, NumberUtil, PasswordUtil, RandomUtil, Sequencer, StringUtil, Util, WebUtil, crypto, fs, mkdirp, path, ref, ref1, remove, request, seedrandom, uuid,
    slice = [].slice,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  fs = require('fs');

  path = require('path');

  HOMEDIR = path.join(__dirname, '..');

  LIB_COV = path.join(HOMEDIR, 'lib-cov');

  LIB_DIR = fs.existsSync(LIB_COV) ? LIB_COV : path.join(HOMEDIR, 'lib');

  MapUtil = require(path.join(LIB_DIR, 'object-util')).MapUtil;

  uuid = require('node-uuid');

  crypto = require('crypto');

  mkdirp = require('mkdirp');

  request = require('request');

  remove = require('remove');

  seedrandom = require('seedrandom');

  DEBUG = (/(^|,)inote-?util($|,)/i.test(typeof process !== "undefined" && process !== null ? (ref = process.env) != null ? ref.NODE_DEBUG : void 0 : void 0)) || (/(^|,)Util($|,)/.test(typeof process !== "undefined" && process !== null ? (ref1 = process.env) != null ? ref1.NODE_DEBUG : void 0 : void 0));

  LogUtil = (function() {
    function LogUtil() {}

    LogUtil._fdt = function(d) {
      return "[" + ((d != null ? d : new Date()).toISOString()) + "]";
    };

    LogUtil.tlog = function() {
      var args;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      return console.log.apply(console, [LogUtil._fdt()].concat(slice.call(args)));
    };

    LogUtil.terr = function() {
      var args;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      return console.error.apply(console, [LogUtil._fdt()].concat(slice.call(args)));
    };

    return LogUtil;

  })();

  DateUtil = (function() {
    function DateUtil() {}

    DateUtil.DAY_OF_WEEK = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"];

    DateUtil.MONTH = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "November", "December"];

    DateUtil.format_datetime_long = function(dt) {
      var e;
      if (dt == null) {
        dt = new Date();
      }
      if (typeof dt === 'string') {
        try {
          dt = new Date(dt);
        } catch (_error) {
          e = _error;
          return null;
        }
      }
      return (DateUtil.format_date_long(dt)) + " at " + (DateUtil.format_time_long(dt));
    };

    DateUtil.format_time_long = function(dt) {
      var ampm, hours, minutes;
      if (dt == null) {
        dt = new Date();
      }
      hours = dt.getUTCHours() % 12;
      if (hours === 0) {
        hours = 12;
      }
      minutes = dt.getUTCMinutes();
      if (minutes < 10) {
        minutes = "0" + minutes;
      }
      if (dt.getUTCHours() > 12) {
        ampm = "PM";
      } else {
        ampm = "AM";
      }
      return hours + ":" + minutes + " " + ampm + " GMT";
    };

    DateUtil.format_date_long = function(dt) {
      var e;
      if (dt == null) {
        dt = new Date();
      }
      if (typeof dt === 'string') {
        try {
          dt = new Date(dt);
        } catch (_error) {
          e = _error;
          return null;
        }
      }
      return DateUtil.DAY_OF_WEEK[dt.getUTCDay()] + " " + (dt.getUTCDate()) + " " + DateUtil.MONTH[dt.getUTCMonth()] + " " + (dt.getUTCFullYear());
    };

    DateUtil.to_unit = function(value, singular, plural) {
      if (plural == null) {
        plural = singular + "s";
      }
      if (value === 1 || value === -1) {
        return value + " " + singular;
      } else {
        return value + " " + plural;
      }
    };

    DateUtil.start_time = Date.now();

    DateUtil.duration = function(now, start) {
      var duration, i, j, l, len, len1, ref2, ref3, result, unit, v, values;
      if (start == null) {
        start = DateUtil.start_time;
      }
      if (now == null) {
        now = Date.now();
      }
      if (start instanceof Date) {
        start = start.getTime();
      }
      if (now instanceof Date) {
        now = now.getTime();
      }
      result = {};
      result.begin = start;
      result.end = now;
      result.delta = now - start;
      duration = result.delta;
      result.in_millis = {};
      result.in_millis.millis = duration % 1000.;
      duration -= result.in_millis.millis;
      result.in_millis.seconds = duration % (1000 * 60);
      duration -= result.in_millis.seconds;
      result.in_millis.minutes = duration % (1000 * 60 * 60);
      duration -= result.in_millis.minutes;
      result.in_millis.hours = duration % (1000 * 60 * 60 * 24);
      duration -= result.in_millis.hours;
      result.in_millis.days = duration % (1000 * 60 * 60 * 24 * 7);
      duration -= result.in_millis.days;
      result.in_millis.weeks = duration % (1000 * 60 * 60 * 24 * 7 * 52);
      duration -= result.in_millis.weeks;
      result.in_millis.years = duration;
      result.raw = {};
      result.raw.millis = result.in_millis.millis;
      result.raw.seconds = result.in_millis.seconds / 1000.;
      result.raw.minutes = result.in_millis.minutes / (1000 * 60);
      result.raw.hours = result.in_millis.hours / (1000 * 60 * 60);
      result.raw.days = result.in_millis.days / (1000 * 60 * 60 * 24);
      result.raw.weeks = result.in_millis.weeks / (1000 * 60 * 60 * 24 * 7);
      result.raw.years = result.in_millis.years / (1000 * 60 * 60 * 24 * 7 * 52);
      result.whole = {};
      result.whole.millis = Math.round(result.raw.millis);
      result.whole.seconds = Math.round(result.raw.seconds);
      result.whole.minutes = Math.round(result.raw.minutes);
      result.whole.hours = Math.round(result.raw.hours);
      result.whole.days = Math.round(result.raw.days);
      result.whole.weeks = Math.round(result.raw.weeks);
      result.whole.years = Math.round(result.raw.years);
      result.array = {};
      result.array.full = {};
      result.array.full.values = [result.whole.years, result.whole.weeks, result.whole.days, result.whole.hours, result.whole.minutes, result.whole.seconds, result.whole.millis];
      result.array.full.short = [result.whole.years + "y", result.whole.weeks + "w", result.whole.days + "d", result.whole.hours + "h", result.whole.minutes + "m", result.whole.seconds + "s", result.whole.millis + "m"];
      result.array.full.long = [DateUtil.to_unit(result.whole.years, "year"), DateUtil.to_unit(result.whole.weeks, "week"), DateUtil.to_unit(result.whole.days, "day"), DateUtil.to_unit(result.whole.hours, "hour"), DateUtil.to_unit(result.whole.minutes, "minute"), DateUtil.to_unit(result.whole.seconds, "second"), DateUtil.to_unit(result.whole.millis, "milli")];
      result.array.full.no_millis = {};
      result.array.full.no_millis.values = [].concat(result.array.full.values.slice(0, -1));
      result.array.full.no_millis.short = [].concat(result.array.full.short.slice(0, -1));
      result.array.full.no_millis.long = [].concat(result.array.full.long.slice(0, -1));
      values = [].concat(result.array.full.values);
      while (values.length > 0 && values[0] === 0) {
        values.shift();
      }
      result.array.brief = {};
      result.array.brief.values = values;
      result.array.brief.short = [];
      result.array.brief.long = [];
      result.array.brief.no_millis = {};
      result.array.brief.no_millis.values = values.slice(0, -1);
      result.array.brief.no_millis.short = [];
      result.array.brief.no_millis.long = [];
      values = [].concat(values);
      ref2 = ['milli', 'second', 'minute', 'hour', 'day', 'week', 'year'];
      for (j = 0, len = ref2.length; j < len; j++) {
        unit = ref2[j];
        v = values.pop();
        if (v != null) {
          result.array.brief.short.unshift("" + v + (unit.substring(0, 1)));
          result.array.brief.long.unshift(DateUtil.to_unit(v, unit));
          if (unit !== 'milli') {
            result.array.brief.no_millis.short.unshift("" + v + (unit.substring(0, 1)));
            result.array.brief.no_millis.long.unshift(DateUtil.to_unit(v, unit));
          }
        } else {
          break;
        }
      }
      result.array.min = {};
      result.array.min.units = [];
      result.array.min.short = [];
      result.array.min.long = [];
      result.array.min.no_millis = {};
      result.array.min.no_millis.units = [];
      result.array.min.no_millis.short = [];
      result.array.min.no_millis.long = [];
      ref3 = ['year', 'week', 'day', 'hour', 'minute', 'second', 'milli'];
      for (i = l = 0, len1 = ref3.length; l < len1; i = ++l) {
        unit = ref3[i];
        v = result.array.full.values[i];
        if (v !== 0) {
          result.array.min.short.push("" + v + (unit.substring(0, 1)));
          result.array.min.long.push(DateUtil.to_unit(v, unit));
          result.array.min.units.push(unit);
          if (unit !== 'milli') {
            result.array.min.no_millis.short.push("" + v + (unit.substring(0, 1)));
            result.array.min.no_millis.long.push(DateUtil.to_unit(v, unit));
            result.array.min.no_millis.units.push(unit);
          }
        }
      }
      result.string = {};
      result.string.full = {};
      result.string.full.micro = result.array.full.short.join('');
      result.string.full.short = result.array.full.short.join(' ');
      result.string.full.long = result.array.full.long.join(' ');
      result.string.full.verbose = ArrayUtil.smart_join(result.array.full.long, ", ", " and ");
      result.string.full.no_millis = {};
      result.string.full.no_millis.micro = result.array.full.no_millis.short.join('');
      result.string.full.no_millis.short = result.array.full.no_millis.short.join(' ');
      result.string.full.no_millis.long = result.array.full.no_millis.long.join(' ');
      result.string.full.no_millis.verbose = ArrayUtil.smart_join(result.array.full.no_millis.long, ", ", " and ");
      result.string.brief = {};
      result.string.brief.micro = result.array.brief.short.join('');
      result.string.brief.short = result.array.brief.short.join(' ');
      result.string.brief.long = result.array.brief.long.join(' ');
      result.string.brief.verbose = ArrayUtil.smart_join(result.array.brief.long, ", ", " and ");
      result.string.brief.no_millis = {};
      result.string.brief.no_millis.micro = result.array.brief.no_millis.short.join('');
      result.string.brief.no_millis.short = result.array.brief.no_millis.short.join(' ');
      result.string.brief.no_millis.long = result.array.brief.no_millis.long.join(' ');
      result.string.brief.no_millis.verbose = ArrayUtil.smart_join(result.array.brief.no_millis.long, ", ", " and ");
      result.string.min = {};
      result.string.min.micro = result.array.min.short.join('');
      result.string.min.short = result.array.min.short.join(' ');
      result.string.min.long = result.array.min.long.join(' ');
      result.string.min.verbose = ArrayUtil.smart_join(result.array.min.long, ", ", " and ");
      result.string.min.no_millis = {};
      result.string.min.no_millis.micro = result.array.min.no_millis.short.join('');
      result.string.min.no_millis.short = result.array.min.no_millis.short.join(' ');
      result.string.min.no_millis.long = result.array.min.no_millis.long.join(' ');
      result.string.min.no_millis.verbose = ArrayUtil.smart_join(result.array.min.no_millis.long, ", ", " and ");
      return result;
    };

    DateUtil.iso_8601_regexp = function() {
      return /^((\d{4})-(\d{2})-(\d{2}))T((\d{2})\:(\d{2})\:((\d{2})(?:\.(\d{3}))?)((?:[A-Za-z]+)|(?:[+-]\d{2}\:\d{2})))$/;
    };

    return DateUtil;

  })();

  StringUtil = (function() {
    function StringUtil() {}

    StringUtil.trim = function(str) {
      return str != null ? str.replace(/(^\s+)|(\s+$)/ig, "") : void 0;
    };

    StringUtil.isnt_blank = function(str) {
      return (str != null) && /[^\s]/.test(str);
    };

    StringUtil.is_blank = function(str) {
      return !(StringUtil.isnt_blank(str));
    };

    StringUtil.blank_to_null = function(data) {
      var k, v;
      if (typeof data === 'string') {
        if (StringUtil.is_blank(data)) {
          return null;
        }
      } else {
        for (k in data) {
          v = data[k];
          if (StringUtil.is_blank(v)) {
            delete data[k];
            data[k] = void 0;
          }
        }
      }
      return data;
    };

    StringUtil.truncate = function(text, width, marker) {
      var break_chars, max_shorten, max_width, short_width;
      if (marker == null) {
        marker = '…';
      }
      if ((text == null) || (text.length == null) || text.length <= width) {
        return text;
      } else {
        if (marker == null) {
          marker = '';
        }
        max_shorten = 10;
        break_chars = /\.|\!|\?|\,|\:|\-|\s|\0|\)|\(|\[|\]|\{|\}|\\|\/|\\|\<|\>|\"|\'/;
        short_width = max_width = width - marker.length;
        while (short_width > (width - max_shorten)) {
          if (break_chars.test(text.charAt(short_width))) {
            return "" + (text.substring(0, short_width)) + marker;
          } else {
            short_width--;
          }
        }
        return "" + (text.substring(0, max_width)) + marker;
      }
    };

    StringUtil.escape_for_json = function(str) {
      if (str != null) {
        str = JSON.stringify(str);
        str = str.substring(1, str.length - 1);
        return str;
      } else {
        return null;
      }
    };

    StringUtil.escape_for_regexp = function(str) {
      return str != null ? str.replace(/([.?*+^$[\]\/\\(){}|-])/g, "\\$1") : void 0;
    };

    StringUtil.truthy_string = function(s) {
      return /^((T(rue)?)|(Y(es)?)|(ON)|1)$/i.test("" + s);
    };

    StringUtil.falsey_string = function(s) {
      return /^((F(alse)?)|(No?)|(OFF)|0)$/i.test("" + s);
    };

    StringUtil.lpad = function(value, width, pad) {
      if (value == null) {
        throw new Error("value must not be null");
      } else {
        if (Array.isArray(value)) {
          return Util.lpad_array(value, width, pad);
        } else {
          return StringUtil.lpad_string(value, width, pad);
        }
      }
    };

    StringUtil.lpad_string = function(value, width, pad_char) {
      if (value == null) {
        value = "";
      }
      if (width == null) {
        width = 8;
      }
      if (pad_char == null) {
        pad_char = " ";
      }
      if (("" + pad_char).length === 0) {
        throw new Error("pad must not be empty");
      }
      value = "" + value;
      while (value.length < width) {
        value = pad_char + value;
      }
      return value;
    };

    StringUtil.rpad = function(value, width, pad) {
      if (value == null) {
        throw new Error("value must not be null");
      } else {
        if (Array.isArray(value)) {
          return Util.rpad_array(value, width, pad);
        } else {
          return StringUtil.rpad_string(value, width, pad);
        }
      }
    };

    StringUtil.rpad_string = function(value, width, pad_char) {
      if (value == null) {
        value = "";
      }
      if (width == null) {
        width = 8;
      }
      if (pad_char == null) {
        pad_char = " ";
      }
      if (("" + pad_char).length === 0) {
        throw new Error("pad must not be empty");
      } else {
        value = "" + value;
        while (value.length < width) {
          value += pad_char;
        }
        return value;
      }
    };

    return StringUtil;

  })();

  ArrayUtil = (function() {
    function ArrayUtil() {}

    ArrayUtil.lpad = StringUtil.lpad;

    ArrayUtil.lpad_array = function(value, width, pad_elt) {
      if (value == null) {
        value = [];
      }
      if (width == null) {
        width = 8;
      }
      if (pad_elt == null) {
        pad_elt = null;
      }
      while (value.length < width) {
        value = [pad_elt].concat(value);
      }
      return value;
    };

    ArrayUtil.rpad = StringUtil.rpad;

    ArrayUtil.rpad_array = function(value, width, pad_elt) {
      if (value == null) {
        value = [];
      }
      if (width == null) {
        width = 8;
      }
      if (pad_elt == null) {
        pad_elt = null;
      }
      while (value.length < width) {
        value.push(pad_elt);
      }
      return value;
    };

    ArrayUtil.smart_join = function(array, delimiter, last) {
      var after, before, buffer, first, head, j, l, middle, options, tail;
      if (array == null) {
        return null;
      } else {
        if (typeof delimiter === 'object') {
          options = delimiter;
          before = options.before;
          first = options.first;
          delimiter = options.delimiter;
          last = options.last;
          after = options.after;
        }
        if ((first != null) && (last != null)) {
          head = array[0], middle = 3 <= array.length ? slice.call(array, 1, j = array.length - 1) : (j = 1, []), tail = array[j++];
        } else if ((first != null) && (last == null)) {
          head = array[0], middle = 2 <= array.length ? slice.call(array, 1) : [];
        } else if ((last != null) && (first == null)) {
          middle = 2 <= array.length ? slice.call(array, 0, l = array.length - 1) : (l = 0, []), tail = array[l++];
        } else {
          middle = array;
        }
        if ((tail != null) && middle.length === 0) {
          middle = [tail];
          tail = void 0;
        }
        buffer = [];
        if (before != null) {
          buffer.push(before);
        }
        if (head != null) {
          buffer.push(head);
          if ((middle != null ? middle.length : void 0) > 0) {
            buffer.push(first);
          }
        }
        if (middle != null) {
          buffer.push(middle.join(delimiter));
        }
        if (tail != null) {
          if (last != null) {
            buffer.push(last);
          }
          buffer.push(tail);
        }
        if (after != null) {
          buffer.push(after);
        }
        return buffer.join("");
      }
    };

    ArrayUtil.trim_trailing_null = function(a) {
      var b, v;
      a = [].concat(a);
      b = [];
      while (a.length > 0) {
        v = a.pop();
        if (v != null) {
          b.unshift(v);
        } else if (b.length > 0) {
          b.unshift(v);
        }
      }
      return b;
    };

    ArrayUtil.right_shift_args = function() {
      var values;
      values = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      return ArrayUtil.lpad(ArrayUtil.trim_trailing_null(values), values.length, null);
    };

    ArrayUtil.paginate_list = function(list, offset, limit) {
      if (offset == null) {
        offset = 0;
      }
      if (limit == null) {
        limit = 20;
      }
      return list.slice(offset, offset + limit);
    };

    ArrayUtil.subset_of = function(a, b) {
      var e, j, len;
      if (!((a != null) && Array.isArray(a) && (b != null) && Array.isArray(b))) {
        throw new Error("Expected arrays.");
      } else {
        for (j = 0, len = a.length; j < len; j++) {
          e = a[j];
          if (indexOf.call(b, e) < 0) {
            return false;
          }
        }
        return true;
      }
    };

    ArrayUtil.is_subset_of = function() {
      var args;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      return ArrayUtil.subset_of.apply(ArrayUtil, args);
    };

    ArrayUtil.strict_subset_of = function(a, b) {
      return ArrayUtil.subset_of(a, b) && !ArrayUtil.subset_of(b, a);
    };

    ArrayUtil.is_strict_subset_of = function() {
      var args;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      return ArrayUtil.strict_subset_of.apply(ArrayUtil, args);
    };

    ArrayUtil.sets_are_equal = function(a, b) {
      var e, j, l, len, len1;
      if (!((a != null) && Array.isArray(a) && (b != null) && Array.isArray(b))) {
        throw new Error("Expected arrays.");
      } else {
        for (j = 0, len = a.length; j < len; j++) {
          e = a[j];
          if (indexOf.call(b, e) < 0) {
            return false;
          }
        }
        for (l = 0, len1 = b.length; l < len1; l++) {
          e = b[l];
          if (indexOf.call(a, e) < 0) {
            return false;
          }
        }
        return true;
      }
    };

    ArrayUtil.arrays_are_equal = function(a, b) {
      var elt, i, j, len;
      if (!((a != null) && Array.isArray(a) && (b != null) && Array.isArray(b))) {
        throw new Error("Expected arrays.");
      } else {
        if (a.length !== b.length) {
          return false;
        } else {
          for (i = j = 0, len = a.length; j < len; i = ++j) {
            elt = a[i];
            if (elt !== b[i]) {
              return false;
            }
          }
          return true;
        }
      }
    };

    ArrayUtil.uniquify = function(array, key) {
      var clone, elt, j, keys, l, len, len1, ref2;
      clone = [];
      if (key != null) {
        keys = [];
        for (j = 0, len = array.length; j < len; j++) {
          elt = array[j];
          if (ref2 = elt[key], indexOf.call(keys, ref2) < 0) {
            clone.push(elt);
            keys.push(elt[key]);
          }
        }
      } else {
        for (l = 0, len1 = array.length; l < len1; l++) {
          elt = array[l];
          if (indexOf.call(clone, elt) < 0) {
            clone.push(elt);
          }
        }
      }
      return clone;
    };

    return ArrayUtil;

  })();

  NumberUtil = (function() {
    function NumberUtil() {}

    NumberUtil.round_decimal = function(value, digits) {
      var factor;
      if (digits == null) {
        digits = 0;
      }
      if (value == null) {
        return null;
      } else {
        if (typeof value !== 'number') {
          if (/^\s*-?(([0-9]+(\.[0-9]+))|(\.[0-9]+))\s*$/.test("" + value)) {
            value = parseFloat(value);
          } else {
            return null;
          }
        }
        if (isNaN(value)) {
          return null;
        } else if (digits >= 0) {
          return value.toFixed(digits);
        } else {
          factor = Math.pow(10, Math.abs(digits));
          return "" + ((Math.round(value / factor)) * factor);
        }
      }
    };

    NumberUtil.is_int = function(v) {
      if (v == null) {
        return false;
      } else {
        return /^-?((0)|([1-9][0-9]*))$/.test("" + v);
      }
    };

    NumberUtil.to_int = function(v) {
      if ((v != null) && NumberUtil.is_int(v)) {
        v = parseInt(v);
        if (isNaN(v)) {
          return null;
        } else {
          return v;
        }
      } else {
        return null;
      }
    };

    return NumberUtil;

  })();

  ColorUtil = (function() {
    function ColorUtil() {}

    ColorUtil.hex_to_rgb_triplet = function(hex) {
      var result;
      result = /^\s*#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})\s*$/i.exec(hex);
      if (result != null) {
        return [parseInt(result[1], 16), parseInt(result[2], 16), parseInt(result[3], 16)];
      } else {
        return null;
      }
    };

    ColorUtil.hex_to_rgb_string = function(hex) {
      var b, g, r, ref2, ref3;
      ref3 = (ref2 = ColorUtil.hex_to_rgb_triplet(hex)) != null ? ref2 : [null, null, null], r = ref3[0], g = ref3[1], b = ref3[2];
      if ((r != null) && (g != null) && (b != null)) {
        return "rgb(" + r + "," + g + "," + b + ")";
      } else {
        return null;
      }
    };

    ColorUtil.rgb_string_to_triplet = function(rgb) {
      var b, g, r, result;
      result = /^\s*rgb\s*\(\s*([0-9]+)\s*,\s*([0-9]+)\s*,\s*([0-9]+)\s*\)\s*$/i.exec(rgb);
      if (result != null) {
        r = parseInt(result[1]);
        g = parseInt(result[2]);
        b = parseInt(result[3]);
        return [r, g, b];
      } else {
        return null;
      }
    };

    ColorUtil.rgb_to_hex = function(r, g, b) {
      var i2h, ref2, ref3;
      if (typeof r === 'string' && (g == null) && (b == null)) {
        ref3 = (ref2 = ColorUtil.rgb_string_to_triplet(r)) != null ? ref2 : [null, null, null], r = ref3[0], g = ref3[1], b = ref3[2];
      }
      if (!((r != null) && (g != null) && (b != null))) {
        return null;
      } else {
        i2h = function(i) {
          var h;
          h = i.toString(16);
          if (h.length === 1) {
            return "0" + h;
          } else {
            return h;
          }
        };
        return "#" + (i2h(r)) + (i2h(g)) + (i2h(b));
      }
    };

    return ColorUtil;

  })();

  RandomUtil = (function() {
    function RandomUtil() {}

    RandomUtil.random_bytes = function(count, enc) {
      var bytes, ref2;
      if (count == null) {
        count = 32;
      }
      if (enc == null) {
        enc = 'hex';
      }
      if (typeof count === 'string') {
        if (typeof enc === 'number') {
          ref2 = [enc, count], count = ref2[0], enc = ref2[1];
        } else {
          enc = count;
          count = 32;
        }
      }
      bytes = crypto.randomBytes(count);
      if (/buffer/i.test(enc)) {
        return bytes;
      } else {
        return bytes.toString(enc);
      }
    };

    RandomUtil.seed_rng = function(seed) {
      return new Math.seedrandom(seed);
    };

    RandomUtil.set_rng = function(rng) {
      if (rng == null) {
        rng = Math.random;
      }
      return RandomUtil.rng = rng;
    };

    RandomUtil.rng = Math.random;

    RandomUtil.random_hex = function(count, rng) {
      if (count == null) {
        count = 32;
      }
      return RandomUtil._random_digits(count, 16, rng);
    };

    RandomUtil.random_alphanumeric = function(count, rng) {
      if (count == null) {
        count = 32;
      }
      return RandomUtil._random_digits(count, 36, rng);
    };

    RandomUtil._random_digits = function() {
      var a, args, base, count, ints, rng, str;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      ints = [];
      rng = null;
      while (args.length > 0) {
        a = args.shift();
        if (typeof a === 'function') {
          if (rng != null) {
            throw new Error("Unexpected arguments: " + args);
          } else {
            rng = a;
          }
        } else {
          if (ints.length === 2 && (a != null)) {
            throw new Error("Unexpected arguments: " + args);
          } else {
            ints.push(a);
          }
        }
      }
      count = ints[0], base = ints[1];
      if (count == null) {
        count = 32;
      }
      if (base == null) {
        base = 10;
      }
      if (rng == null) {
        rng = RandomUtil.rng;
      }
      str = "";
      while (str.length < count) {
        str += rng().toString(base).substring(2);
      }
      if (str.length > count) {
        str = str.substring(0, count);
      }
      return str;
    };

    return RandomUtil;

  })();

  PasswordUtil = (function() {
    function PasswordUtil() {}

    PasswordUtil.validate_hashed_password = function(expected_digest, password, salt, pepper, hash_type) {
      var digest, ref2;
      ref2 = PasswordUtil.hash_password(password, salt, pepper, hash_type), salt = ref2[0], digest = ref2[1];
      password = void 0;
      return Util.slow_equals(expected_digest, digest)[0];
    };

    PasswordUtil.hash_password = function(password, salt, pepper, hash_type) {
      var digest, hash;
      if (typeof password === 'object') {
        hash_type = password.hash_type;
        pepper = password.pepper;
        salt = password.salt;
        password = password.password;
      }
      if (hash_type == null) {
        hash_type = 'sha512';
      }
      if (salt == null) {
        salt = 64;
      }
      if ((password != null) && !Buffer.isBuffer(password)) {
        password = new Buffer(password);
      }
      if ((pepper != null) && !Buffer.isBuffer(pepper)) {
        pepper = new Buffer(pepper);
      }
      if (typeof salt === 'number') {
        salt = RandomUtil.random_bytes(salt, 'buffer');
      } else if (!Buffer.isBuffer(salt)) {
        salt = new Buffer(salt);
      }
      if (password == null) {
        throw new Error("password parameter is required");
      } else {
        hash = crypto.createHash(hash_type);
        hash.update(salt);
        if (pepper != null) {
          hash.update(pepper);
        }
        hash.update(password);
        password = void 0;
        digest = hash.digest();
        return [salt, digest];
      }
    };

    return PasswordUtil;

  })();

  ComparatorUtil = (function() {
    function ComparatorUtil() {}

    ComparatorUtil.slow_equals = function(a, b) {
      var delta_count, i, j, ref2, ref3, same_count;
      same_count = delta_count = 0;
      if (b.length > a.length) {
        ref2 = [b, a], a = ref2[0], b = ref2[1];
      }
      for (i = j = 0, ref3 = a.length; 0 <= ref3 ? j < ref3 : j > ref3; i = 0 <= ref3 ? ++j : --j) {
        if (a[i] !== b[i]) {
          delta_count += 1;
        } else {
          same_count += 1;
        }
      }
      if (delta_count === 0 && a.length === b.length) {
        return [true, same_count, delta_count];
      } else {
        return [false, same_count, delta_count];
      }
    };

    ComparatorUtil.compare = function(a, b) {
      var A, B, val;
      if ((a != null) && (b != null)) {
        if ((a.localeCompare != null) && (b.localeCompare != null) && (a.toUpperCase != null) && (b.toUpperCase != null)) {
          A = a.toUpperCase();
          B = b.toUpperCase();
          val = A.localeCompare(B);
          if (val === 0) {
            return a.localeCompare(b);
          } else {
            return val;
          }
        } else {
          return (a > b ? 1 : (a < b ? -1 : 0));
        }
      } else if ((a != null) && (b == null)) {
        return 1;
      } else if ((b != null) && (a == null)) {
        return -1;
      } else {
        return 0;
      }
    };

    ComparatorUtil.case_insensitive_compare = function(a, b) {
      var A, B, result;
      if ((a != null ? a.toUpperCase : void 0) != null) {
        A = a.toUpperCase();
      } else {
        A = a;
      }
      if ((b != null ? b.toUpperCase : void 0) != null) {
        B = b.toUpperCase();
      } else {
        B = b;
      }
      result = ComparatorUtil.compare(A, B);
      if (result === 0) {
        result = ComparatorUtil.compare(a, b);
      }
      return result;
    };

    ComparatorUtil.field_comparator = function(field, ignore_case) {
      if (ignore_case == null) {
        ignore_case = false;
      }
      return ComparatorUtil.path_comparator([field], ignore_case);
    };

    ComparatorUtil.path_comparator = function(path, ignore_case) {
      if (ignore_case == null) {
        ignore_case = false;
      }
      return function(a, b) {
        var A, B, f, fn, j, len;
        fn = ignore_case ? 'case_insensitive_compare' : 'compare';
        A = a;
        B = b;
        for (j = 0, len = path.length; j < len; j++) {
          f = path[j];
          A = A != null ? A[f] : void 0;
          B = B != null ? B[f] : void 0;
          if (!((A != null) && (B != null))) {
            return Util[fn](A, B);
          }
        }
        return Util[fn](A, B);
      };
    };

    ComparatorUtil.desc_comparator = function(c) {
      return function(a, b) {
        return c(b, a);
      };
    };

    ComparatorUtil.descending_comparator = function() {
      var args;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      return ComparatorUtil.desc_comparator.apply(ComparatorUtil, args);
    };

    ComparatorUtil.composite_comparator = function(list) {
      return function(a, b) {
        var c, j, len, r;
        for (j = 0, len = list.length; j < len; j++) {
          c = list[j];
          r = c(a, b);
          if (r !== 0) {
            return r;
          }
        }
        return 0;
      };
    };

    return ComparatorUtil;

  })();

  FileUtil = (function() {
    function FileUtil() {}

    FileUtil.sanitize_filename = function(str) {
      var BAD_CHARS, MAX_BASENAME, MAX_EXTENSION, SUBST_CHAR, base, ext, parent, ref2, ref3, ref4;
      BAD_CHARS = /[^-A-Za-z0-9_]/g;
      SUBST_CHAR = '-';
      MAX_EXTENSION = 260;
      MAX_BASENAME = 260;
      parent = (ref2 = path.dirname(str)) != null ? ref2 : '';
      ext = (ref3 = path.extname(str)) != null ? ref3 : '';
      base = (ref4 = path.basename(str, ext)) != null ? ref4 : '';
      if (/^\..+/.test(ext)) {
        ext = "." + ext.substring(1).replace(BAD_CHARS, SUBST_CHAR);
      }
      if ((ext != null ? ext.length : void 0) > MAX_EXTENSION) {
        ext = ext.substring(0, MAX_EXTENSION);
      }
      base = base.replace(BAD_CHARS, SUBST_CHAR);
      if ((base != null ? base.length : void 0) > MAX_BASENAME) {
        base = base.substring(0, MAX_BASENAME);
      }
      if ((parent != null ? parent.length : void 0) > 0) {
        return path.join(parent, "" + base + ext);
      } else {
        return "" + base + ext;
      }
    };

    FileUtil.uniquify_filename = function(dir, basename, ext, minpadwidth, maxpadwidth) {
      var i, max_attempts;
      if (ext == null) {
        ext = '';
      }
      if (minpadwidth == null) {
        minpadwidth = 3;
      }
      if (maxpadwidth == null) {
        maxpadwidth = 5;
      }
      max_attempts = Math.pow(10, maxpadwidth);
      if (!fs.existsSync(path.join(dir, "" + basename + ext))) {
        return "" + basename + ext;
      } else {
        i = 1;
        while (fs.existsSync(path.join(dir, basename + "-" + (Util.lpad(i, minpadwidth, '0')) + ext))) {
          if (i > max_attempts) {
            throw new Error("Unable to obtain a unique filename for \"" + basename + ext + "\" in \"" + dir + "\" after " + max_attempts + " attempts.");
          } else {
            i += 1;
          }
        }
        return basename + "-" + (Util.lpad(i, minpadwidth, '0')) + ext;
      }
    };

    FileUtil.mkdir = function(dir) {
      var e;
      if (dir != null) {
        try {
          mkdirp.sync(dir);
          return true;
        } catch (_error) {
          e = _error;
          if (DEBUG) {
            console.error("FileUtil.mkdir", e);
          }
          return false;
        }
      } else {
        return false;
      }
    };

    FileUtil.rm = function() {
      var e, file, files, j, len, result;
      files = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      result = false;
      if ((files != null) && files.length > 0) {
        result = true;
        for (j = 0, len = files.length; j < len; j++) {
          file = files[j];
          try {
            fs.unlinkSync(file);
          } catch (_error) {
            e = _error;
            result = false;
            if (DEBUG) {
              console.error("FileUtil.rm", e);
            }
          }
        }
      }
      return result;
    };

    FileUtil.rmdir = function() {
      var dir, dirs, e, j, len, result;
      dirs = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      result = false;
      if ((dirs != null) && dirs.length > 0) {
        result = true;
        for (j = 0, len = dirs.length; j < len; j++) {
          dir = dirs[j];
          try {
            remove.removeSync(dir);
          } catch (_error) {
            e = _error;
            result = false;
            if (DEBUG) {
              console.error("FileUtil.rmdir", e);
            }
          }
        }
      }
      return result;
    };

    FileUtil.read_stdin_sync = function(end_byte, buffer_size) {
      var all_buf, all_bytes_read, b, bytes_read, end_byte_read, err, fd, j, len, read_buf, ref2, temp_buf;
      if (end_byte == null) {
        end_byte = "\x04";
      }
      if (buffer_size == null) {
        buffer_size = 512;
      }
      read_buf = new Buffer(buffer_size);
      bytes_read = 0;
      all_buf = new Buffer(buffer_size);
      all_bytes_read = 0;
      end_byte_read = false;
      fd = typeof process !== "undefined" && process !== null ? (ref2 = process.stdin) != null ? ref2.fd : void 0 : void 0;
      if (fd == null) {
        throw new Error("Unable to obtain stdin.fd");
      } else {
        while (true) {
          try {
            bytes_read = fs.readSync(fd, read_buf, 0, buffer_size, null);
            temp_buf = new Buffer(all_bytes_read + bytes_read);
            all_buf.copy(temp_buf, 0, 0, all_bytes_read);
            read_buf.copy(temp_buf, all_bytes_read, 0, bytes_read);
            all_buf = temp_buf;
            all_bytes_read += bytes_read;
            for (j = 0, len = bytes_read.length; j < len; j++) {
              b = bytes_read[j];
              if (b === end_byte) {
                end_byte_read = true;
                break;
              }
            }
            if (end_byte_read) {
              break;
            }
          } catch (_error) {
            err = _error;
            if (err.code === 'EOF') {
              break;
            } else {
              throw err;
            }
          }
          if (bytes_read === 0) {
            break;
          }
        }
        return all_buf;
      }
    };

    FileUtil.load_json_file_sync = function(file, ignore_errors) {
      var err;
      if (ignore_errors == null) {
        ignore_errors = false;
      }
      try {
        return JSON.parse(fs.readFileSync(file).toString());
      } catch (_error) {
        err = _error;
        if (ignore_errors) {
          return null;
        } else {
          throw err;
        }
      }
    };

    FileUtil.load_json_stdin_sync = function(end_byte, buffer_size, ignore_errors) {
      var err;
      if (end_byte == null) {
        end_byte = "\x04";
      }
      if (buffer_size == null) {
        buffer_size = 512;
      }
      if (ignore_errors == null) {
        ignore_errors = false;
      }
      try {
        return JSON.parse(FileUtil.read_stdin_sync(end_byte, buffer_size));
      } catch (_error) {
        err = _error;
        if (ignore_errors) {
          return null;
        } else {
          throw err;
        }
      }
    };

    FileUtil.touch = function(file, callback) {
      return fs.open(file, "wx", function(err, fd) {
        if (fd != null) {
          return fs.close(fd, function(err) {
            return typeof callback === "function" ? callback() : void 0;
          });
        } else {
          return typeof callback === "function" ? callback() : void 0;
        }
      });
    };

    return FileUtil;

  })();

  WebUtil = (function() {
    function WebUtil() {}

    WebUtil.remote_ip = function(req) {
      var ref10, ref2, ref3, ref4, ref5, ref6, ref7, ref8, ref9;
      return (ref2 = (ref3 = (ref4 = (ref5 = req != null ? typeof req.get === "function" ? req.get('x-forwarded-for') : void 0 : void 0) != null ? ref5 : req != null ? (ref6 = req.headers) != null ? ref6['x-forwarded-for'] : void 0 : void 0) != null ? ref4 : req != null ? (ref7 = req.connection) != null ? ref7.remoteAddress : void 0 : void 0) != null ? ref3 : req != null ? (ref8 = req.socket) != null ? ref8.remoteAddress : void 0 : void 0) != null ? ref2 : req != null ? (ref9 = req.connection) != null ? (ref10 = ref9.socket) != null ? ref10.remoteAddress : void 0 : void 0 : void 0;
    };

    WebUtil.param = function(req, name, default_value) {
      var ref2, ref3, ref4, ref5, ref6, ref7;
      return (ref2 = req != null ? (ref3 = req.params) != null ? ref3[name] : void 0 : void 0) != null ? ref2 : (ref4 = req != null ? (ref5 = req.body) != null ? ref5[name] : void 0 : void 0) != null ? ref4 : (ref6 = req != null ? (ref7 = req.query) != null ? ref7[name] : void 0 : void 0) != null ? ref6 : default_value;
    };

    return WebUtil;

  })();

  IOUtil = (function() {
    function IOUtil() {}

    IOUtil.pipe_to_buffer = function(readable_stream, callback) {
      var data, length;
      data = [];
      length = 0;
      readable_stream.on('data', function(chunk) {
        if (chunk != null) {
          data.push(chunk);
          return length += chunk.length;
        }
      });
      readable_stream.on('error', function(err) {
        return callback(err);
      });
      return readable_stream.on('end', function() {
        return callback(null, Buffer.concat(data));
      });
    };

    IOUtil.pipe_to_file = function(readable_stream, dest, options, callback) {
      var out;
      if ((options != null) && typeof options === 'function' && (callback == null)) {
        callback = options;
        options = null;
      }
      out = fs.createWriteStream(dest, options);
      out.on('close', callback);
      out.on('error', callback);
      return readable_stream.pipe(out);
    };

    IOUtil.download_to_buffer = function(url, callback) {
      var params;
      params = {};
      if (typeof url === 'string') {
        params.url = url;
      } else {
        params = url;
      }
      return request(params, function(err, response, body) {
        if (err != null) {
          return callback(err);
        } else if (!/^2[0-9][0-9]$/.test(request != null ? request.statusCode : void 0)) {
          return callback(response, body);
        } else {
          return callback(null, body);
        }
      });
    };

    IOUtil.download_to_file = function(url, dest, options, callback) {
      var out, params;
      if ((options != null) && typeof options === 'function' && (callback == null)) {
        callback = options;
        options = null;
      }
      params = {};
      if (typeof url === 'string') {
        params.url = url;
      } else {
        params = url;
      }
      out = fs.createWriteStream(dest, options);
      out.on('close', callback);
      out.on('error', callback);
      return request(params).pipe(out);
    };

    return IOUtil;

  })();

  ErrorUtil = (function() {
    function ErrorUtil() {}

    ErrorUtil.handle_error = function(err, callback, throw_when_no_callback) {
      if (throw_when_no_callback == null) {
        throw_when_no_callback = true;
      }
      if (err != null) {
        if (callback != null) {
          callback(err);
          return true;
        } else if (throw_when_no_callback) {
          throw err;
        } else {
          return console.error("ERROR", err);
        }
      } else {
        return false;
      }
    };

    return ErrorUtil;

  })();

  IdUtil = (function() {
    function IdUtil() {}

    IdUtil.uuid = function(v, generate) {
      if (generate == null) {
        generate = false;
      }
      if (v == null) {
        if (generate) {
          v = IdUtil.uuid(uuid.v1());
        } else {
          return null;
        }
      } else if (v.replace == null) {
        throw new Error("Expected string but found " + (typeof v), v);
      } else if (!/^[0-9a-f]{8}-?[0-9a-f]{4}-?[0-9a-f]{4}-?[0-9a-f]{4}-?[0-9a-f]{12}$/i.test(v)) {
        throw new Error("Encountered invalid UUID format " + v + ".");
      }
      return v.replace(/-/g, '').toLowerCase();
    };

    IdUtil.pad_uuid = function(v, generate) {
      if (generate == null) {
        generate = false;
      }
      v = IdUtil.uuid(v, generate);
      if (v != null) {
        return v.substring(0, 8) + "-" + v.substring(8, 12) + "-" + v.substring(12, 16) + "-" + v.substring(16, 20) + "-" + v.substring(20);
      } else {
        return null;
      }
    };

    return IdUtil;

  })();

  Base64 = (function() {
    function Base64() {}

    Base64.encode = function(buf, output_encoding) {
      if (output_encoding == null) {
        output_encoding = 'utf8';
      }
      if (buf == null) {
        return null;
      } else {
        if (!(buf instanceof Buffer)) {
          buf = new Buffer(buf.toString(), output_encoding);
        }
        return buf.toString('base64');
      }
    };

    Base64.decode = function(buf, output_encoding) {
      if (output_encoding == null) {
        output_encoding = 'utf8';
      }
      if (buf == null) {
        return null;
      } else {
        if (!(buf instanceof Buffer)) {
          buf = new Buffer(buf.toString(), 'base64');
        }
        return buf.toString(output_encoding);
      }
    };

    return Base64;

  })();

  AsyncUtil = (function() {
    function AsyncUtil() {}

    AsyncUtil.wait = function(delay, cb) {
      return process.nextTick(function() {
        return setTimeout(cb, delay);
      });
    };

    AsyncUtil.set_timeout = function(delay, cb) {
      return AsyncUtil.wait(delay, cb);
    };

    AsyncUtil.setTimeout = function(delay, cb) {
      return AsyncUtil.wait(delay, cb);
    };

    AsyncUtil.cancel_wait = function(id) {
      return clearTimeout(id);
    };

    AsyncUtil.clearTimeout = function(id) {
      return AsyncUtil.cancel_wait(id);
    };

    AsyncUtil.clear_timeout = function(id) {
      return AsyncUtil.cancel_wait(id);
    };

    AsyncUtil.interval = function(delay, cb) {
      return setInterval(cb, delay);
    };

    AsyncUtil.set_interval = function(delay, cb) {
      return interval(cb, delay);
    };

    AsyncUtil.setInterval = function(delay, cb) {
      return AsyncUtil.interval(delay, cb);
    };

    AsyncUtil.cancel_interval = function(id) {
      return clearInterval(id);
    };

    AsyncUtil.cancelInterval = function(id) {
      return AsyncUtil.cancel_interval(id);
    };

    AsyncUtil.clear_interval = function(id) {
      return AsyncUtil.cancel_interval(id);
    };

    AsyncUtil.clearInterval = function(id) {
      return AsyncUtil.cancel_interval(id);
    };

    AsyncUtil.for_async = function(initialize, condition, action, increment, whendone) {
      var looper;
      looper = function() {
        if (condition()) {
          return action(function() {
            increment();
            return looper();
          });
        } else {
          if (whendone != null) {
            return whendone();
          }
        }
      };
      initialize();
      return looper();
    };

    AsyncUtil.for_each_async = function(list, action, whendone) {
      var act, cond, i, incr, init, m;
      i = m = null;
      init = function() {
        return i = 0;
      };
      cond = function() {
        return i < list.length;
      };
      incr = function() {
        return i += 1;
      };
      act = function(next) {
        return action(list[i], i, list, next);
      };
      return AsyncUtil.for_async(init, cond, act, incr, whendone);
    };

    AsyncUtil.fork = function(methods, args_for_methods, callback) {
      var index, j, len, method, remaining_callbacks, results, results1;
      if ((callback == null) && (typeof args_for_methods === 'function')) {
        callback = args_for_methods;
        args_for_methods = null;
      }
      results = [];
      remaining_callbacks = methods.length;
      results1 = [];
      for (index = j = 0, len = methods.length; j < len; index = ++j) {
        method = methods[index];
        results1.push((function(method, index) {
          var method_args, ref2;
          method_args = (ref2 = args_for_methods != null ? args_for_methods[index] : void 0) != null ? ref2 : [];
          return method.apply(null, slice.call(method_args).concat([function() {
            var callback_args;
            callback_args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
            results[index] = callback_args;
            remaining_callbacks--;
            if (remaining_callbacks === 0) {
              return callback(results);
            }
          }]));
        })(method, index));
      }
      return results1;
    };

    AsyncUtil.throttled_fork = function(max_parallel, methods, args_for_methods, callback) {
      var currently_running, next_to_run, remaining_callbacks, results, run_more;
      if ((callback == null) && typeof args_for_methods === 'function') {
        callback = args_for_methods;
        args_for_methods = null;
      }
      results = [];
      currently_running = 0;
      next_to_run = 0;
      remaining_callbacks = methods.length;
      run_more = function() {
        var index, results1;
        results1 = [];
        while ((currently_running < max_parallel) && (next_to_run < methods.length)) {
          index = next_to_run;
          currently_running++;
          next_to_run++;
          results1.push((function(index) {
            var method, method_args, ref2;
            method_args = (ref2 = args_for_methods != null ? args_for_methods[index] : void 0) != null ? ref2 : [];
            method = methods[index];
            return method.apply(null, slice.call(method_args).concat([function() {
              var callback_args;
              callback_args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
              results[index] = callback_args;
              currently_running--;
              remaining_callbacks--;
              if (remaining_callbacks === 0) {
                return callback(results);
              } else {
                return run_more();
              }
            }]));
          })(index));
        }
        return results1;
      };
      return run_more();
    };

    AsyncUtil.procedure = function() {
      return new Sequencer();
    };

    return AsyncUtil;

  })();

  Sequencer = (function() {
    function Sequencer() {
      this.run = bind(this.run, this);
      this["finally"] = bind(this["finally"], this);
      this.last = bind(this.last, this);
      this.then = bind(this.then, this);
      this.next = bind(this.next, this);
      this.first = bind(this.first, this);
      this.list = [];
    }

    Sequencer.prototype.first = function(step) {
      this.list = [];
      this.list.push(step);
      return this;
    };

    Sequencer.prototype.next = function(step) {
      this.list.push(step);
      return this;
    };

    Sequencer.prototype.then = function(step) {
      return this.next(step);
    };

    Sequencer.prototype.last = function(step, callback) {
      this.next(step);
      this.run(callback);
      return this;
    };

    Sequencer.prototype["finally"] = function(step, callback) {
      return this.last(step, callback);
    };

    Sequencer.prototype.run = function() {
      var action, args, callback, j;
      args = 2 <= arguments.length ? slice.call(arguments, 0, j = arguments.length - 1) : (j = 0, []), callback = arguments[j++];
      action = (function(_this) {
        return function(step, index, list, next) {
          return step.apply(null, slice.call(args).concat([function() {
            var new_args;
            new_args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
            args = new_args;
            return next();
          }]));
        };
      })(this);
      Util.for_each_async(this.list, action, (function(_this) {
        return function() {
          return typeof callback === "function" ? callback.apply(null, args) : void 0;
        };
      })(this));
      return this;
    };

    return Sequencer;

  })();

  Util = (function() {
    function Util() {}

    Util.to_unit = DateUtil.to_unit;

    Util.start_time = DateUtil.start_time;

    Util.duration = DateUtil.duration;

    Util.iso_8601_regexp = DateUtil.iso_8601_regexp;

    Util.trim = StringUtil.trim;

    Util.isnt_blank = StringUtil.isnt_blank;

    Util.is_blank = StringUtil.is_blank;

    Util.blank_to_null = StringUtil.blank_to_null;

    Util.truncate = StringUtil.truncate;

    Util.escape_for_json = StringUtil.escape_for_json;

    Util.escape_for_regexp = StringUtil.escape_for_regexp;

    Util.truthy_string = StringUtil.truthy_string;

    Util.falsey_string = StringUtil.falsey_string;

    Util.lpad = StringUtil.lpad;

    Util.lpad_string = StringUtil.lpad_string;

    Util.rpad = StringUtil.rpad;

    Util.rpad_string = StringUtil.rpad_string;

    Util.lpad_array = ArrayUtil.lpad_array;

    Util.rpad_array = ArrayUtil.rpad_array;

    Util.smart_join = ArrayUtil.smart_join;

    Util.trim_trailing_null = ArrayUtil.trim_trailing_null;

    Util.right_shift_args = ArrayUtil.right_shift_args;

    Util.paginate_list = ArrayUtil.paginate_list;

    Util.subset_of = ArrayUtil.subset_of;

    Util.is_subset_of = ArrayUtil.is_subset_of;

    Util.strict_subset_of = ArrayUtil.strict_subset_of;

    Util.is_strict_subset_of = ArrayUtil.is_strict_subset_of;

    Util.sets_are_equal = ArrayUtil.sets_are_equal;

    Util.arrays_are_equal = ArrayUtil.arrays_are_equal;

    Util.uniquify = ArrayUtil.uniquify;

    Util.round_decimal = NumberUtil.round_decimal;

    Util.is_int = NumberUtil.is_int;

    Util.to_int = NumberUtil.to_int;

    Util.remove_null = MapUtil.remove_null;

    Util.remove_falsey = MapUtil.remove_falsey;

    Util.merge = MapUtil.merge;

    Util.shallow_clone = MapUtil.shallow_clone;

    Util.object_array_to_map = MapUtil.object_array_to_map;

    Util.hex_to_rgb_triplet = ColorUtil.hex_to_rgb_triplet;

    Util.hex_to_rgb_string = ColorUtil.hex_to_rgb_string;

    Util.rgb_string_to_triplet = ColorUtil.rgb_string_to_triplet;

    Util.rgb_to_hex = ColorUtil.rgb_to_hex;

    Util.random_bytes = RandomUtil.random_bytes;

    Util.random_hex = RandomUtil.random_hex;

    Util.random_alphanumeric = RandomUtil.random_alphanumeric;

    Util.seed_rng = RandomUtil.seed_rng;

    Util.set_rng = RandomUtil.set_rng;

    Util.random_digits = RandomUtil.random_digits;

    Util.validate_hashed_password = PasswordUtil.validate_hashed_password;

    Util.hash_password = PasswordUtil.hash_password;

    Util.slow_equals = ComparatorUtil.slow_equals;

    Util.compare = ComparatorUtil.compare;

    Util.case_insensitive_compare = ComparatorUtil.case_insensitive_compare;

    Util.field_comparator = ComparatorUtil.field_comparator;

    Util.path_comparator = ComparatorUtil.path_comparator;

    Util.desc_comparator = ComparatorUtil.desc_comparator;

    Util.descending_comparator = ComparatorUtil.descending_comparator;

    Util.composite_comparator = ComparatorUtil.composite_comparator;

    Util.read_stdin_sync = FileUtil.read_stdin_sync;

    Util.load_json_file_sync = FileUtil.load_json_file_sync;

    Util.load_json_stdin_sync = FileUtil.load_json_stdin_sync;

    Util.remote_ip = WebUtil.remote_ip;

    Util.handle_error = ErrorUtil.handle_error;

    Util.uuid = IdUtil.uuid;

    Util.pad_uuid = IdUtil.pad_uuid;

    Util.b64e = Base64.encode;

    Util.b64d = Base64.decode;

    Util.for_async = AsyncUtil.for_async;

    Util.for_each_async = AsyncUtil.for_each_async;

    Util.fork = AsyncUtil.fork;

    Util.throttled_fork = AsyncUtil.throttled_fork;

    Util.procedure = AsyncUtil.procedure;

    return Util;

  })();

  exports.ArrayUtil = ArrayUtil;

  exports.AsyncUtil = AsyncUtil;

  exports.Base64 = Base64;

  exports.ColorUtil = ColorUtil;

  exports.ComparatorUtil = ComparatorUtil;

  exports.DateUtil = DateUtil;

  exports.ErrorUtil = ErrorUtil;

  exports.FileUtil = FileUtil;

  exports.IdUtil = IdUtil;

  exports.LogUtil = LogUtil;

  exports.MapUtil = MapUtil;

  exports.NumberUtil = NumberUtil;

  exports.PasswordUtil = PasswordUtil;

  exports.RandomUtil = RandomUtil;

  exports.Sequencer = Sequencer;

  exports.StringUtil = StringUtil;

  exports.Util = Util;

  exports.WebUtil = WebUtil;

}).call(this);
