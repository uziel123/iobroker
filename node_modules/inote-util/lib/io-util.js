// Generated by CoffeeScript 1.9.3
(function() {
  var DEBUG, IOUtil, fs, ref, ref1, request;

  fs = require('fs');

  request = require('request');

  DEBUG = (/(^|,)inote-?util($|,)/i.test(typeof process !== "undefined" && process !== null ? (ref = process.env) != null ? ref.NODE_DEBUG : void 0 : void 0)) || (/(^|,)IOUtil($|,)/.test(typeof process !== "undefined" && process !== null ? (ref1 = process.env) != null ? ref1.NODE_DEBUG : void 0 : void 0));

  IOUtil = (function() {
    function IOUtil() {}

    IOUtil.pipe_to_buffer = function(readable_stream, callback) {
      var data, length;
      data = [];
      length = 0;
      readable_stream.on('data', function(chunk) {
        if (chunk != null) {
          data.push(chunk);
          return length += chunk.length;
        }
      });
      readable_stream.on('error', function(err) {
        return callback(err);
      });
      return readable_stream.on('end', function() {
        return callback(null, Buffer.concat(data));
      });
    };

    IOUtil.pipe_to_file = function(readable_stream, dest, options, callback) {
      var out;
      if ((options != null) && typeof options === 'function' && (callback == null)) {
        callback = options;
        options = null;
      }
      out = fs.createWriteStream(dest, options);
      out.on('close', callback);
      out.on('error', callback);
      return readable_stream.pipe(out);
    };

    IOUtil.download_to_buffer = function(url, callback) {
      var params;
      params = {};
      if (typeof url === 'string') {
        params.url = url;
      } else {
        params = url;
      }
      params.encoding = null;
      return request(params, function(err, response, body) {
        if (typeof body === 'string') {
          body = new Buffer(body, 'binary');
        }
        if (err != null) {
          return callback(err);
        } else if (!/^2[0-9][0-9]$/.test("" + (response != null ? response.statusCode : void 0))) {
          return callback(response, body);
        } else {
          return callback(null, body);
        }
      });
    };

    IOUtil.download_to_file = function(url, dest, options, callback) {
      var out, params;
      if ((options != null) && typeof options === 'function' && (callback == null)) {
        callback = options;
        options = null;
      }
      params = {};
      if (typeof url === 'string') {
        params.url = url;
      } else {
        params = url;
      }
      out = fs.createWriteStream(dest, options);
      out.on('close', callback);
      out.on('error', callback);
      return request(params).pipe(out);
    };

    return IOUtil;

  })();

  exports.IOUtil = IOUtil;

}).call(this);
