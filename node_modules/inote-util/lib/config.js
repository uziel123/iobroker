// Generated by CoffeeScript 1.9.3
(function() {
  var CONFIG_DIR, Config, fs, path,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  fs = require('fs');

  path = require('path');

  CONFIG_DIR = path.join(process.cwd(), 'config');

  Config = (function() {
    function Config(defaults, overrides) {
      if (defaults == null) {
        defaults = null;
      }
      if (overrides == null) {
        overrides = null;
      }
      this._load_if_exists = bind(this._load_if_exists, this);
      if ((defaults != null) || (overrides != null)) {
        this.init(defaults, overrides);
      }
    }

    Config.prototype._load_if_exists = function(file) {
      if ((file != null) && fs.existsSync(file)) {
        this.nconf.file(file);
        return true;
      } else {
        return false;
      }
    };

    Config.prototype.init = function(defaults, overrides) {
      var config_dir, config_file;
      if (defaults == null) {
        defaults = null;
      }
      if (overrides == null) {
        overrides = null;
      }
      this.nconf = require('nconf');
      if (overrides != null) {
        this.nconf.overrides(overrides);
      }
      this.nconf.argv();
      this.nconf.env(['NODE_ENV', 'config_file', 'config_dir']);
      config_dir = this.nconf.get('config_dir');
      if (config_dir != null) {
        if (fs.existsSync(config_dir)) {
          CONFIG_DIR = config_dir;
        } else {
          console.error("Custom config_dir " + config_dir + " not found; aborting.");
          process.exit(1);
        }
      } else {
        config_dir = CONFIG_DIR;
      }
      if (this.nconf.get('NODE_ENV') != null) {
        this._load_if_exists(path.join(config_dir, (this.nconf.get('NODE_ENV')) + ".json"));
      }
      config_file = this.nconf.get('config_file');
      if (config_file != null) {
        if (!this._load_if_exists(config_file)) {
          console.error("Custom config_file " + config_file + " not found; aborting.");
          process.exit(1);
        }
      }
      this.nconf.env();
      this._load_if_exists(path.join(config_dir, 'config.json'));
      if (defaults != null) {
        this.nconf.defaults(defaults);
      }
      return this.nconf;
    };

    return Config;

  })();

  exports.config = new Config();

}).call(this);
