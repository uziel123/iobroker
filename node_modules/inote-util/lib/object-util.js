// Generated by CoffeeScript 1.9.3
(function() {
  var MapUtil, ObjectUtil,
    slice = [].slice;

  ObjectUtil = (function() {
    function ObjectUtil() {}

    ObjectUtil.remove_null = function(map) {
      var elt, i, len, n, new_array, new_map, v;
      if (map == null) {
        return null;
      } else if (Array.isArray(map)) {
        new_array = [];
        for (i = 0, len = map.length; i < len; i++) {
          elt = map[i];
          if (elt != null) {
            new_array.push(elt);
          }
        }
        return new_array;
      } else if (typeof map === 'object') {
        new_map = {};
        for (n in map) {
          v = map[n];
          if (v != null) {
            new_map[n] = v;
          }
        }
        return new_map;
      } else {
        return map;
      }
    };

    ObjectUtil.remove_falsey = function(map) {
      var elt, i, len, n, new_array, new_map, v;
      if (map == null) {
        return map;
      } else if (Array.isArray(map)) {
        new_array = [];
        for (i = 0, len = map.length; i < len; i++) {
          elt = map[i];
          if (elt) {
            new_array.push(elt);
          }
        }
        return new_array;
      } else if (typeof map === 'object') {
        new_map = {};
        for (n in map) {
          v = map[n];
          if (v) {
            new_map[n] = v;
          }
        }
        return new_map;
      } else if (!map) {
        return null;
      } else {
        return map;
      }
    };

    ObjectUtil.merge = function() {
      var args, i, len, m, map, n, ref, ref1, v;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      map = {};
      if (args.length === 1 && Array.isArray(args[0])) {
        args = args[0];
      }
      ref = args != null ? args : [];
      for (i = 0, len = ref.length; i < len; i++) {
        m = ref[i];
        ref1 = m != null ? m : {};
        for (n in ref1) {
          v = ref1[n];
          map[n] = v;
        }
      }
      return map;
    };

    ObjectUtil.shallow_clone = function(map) {
      var k, new_array, new_map, ref, v;
      if (map == null) {
        return null;
      } else if (Array.isArray(map)) {
        new_array = [];
        new_array = new_array.concat(map);
        return new_array;
      } else if (typeof map === 'string') {
        return new String(map);
      } else if ((ref = typeof map) === 'number' || ref === 'boolean') {
        return map;
      } else {
        new_map = {};
        for (k in map) {
          v = map[k];
          new_map[k] = v;
        }
        return new_map;
      }
    };

    ObjectUtil.deep_clone = function(map) {
      var elt, i, k, len, new_array, new_map, ref, v;
      if (map == null) {
        return null;
      } else if (Array.isArray(map)) {
        new_array = [];
        for (i = 0, len = map.length; i < len; i++) {
          elt = map[i];
          new_array.push(ObjectUtil.deep_clone(elt));
        }
        return new_array;
      } else if ((ref = typeof map) === 'string' || ref === 'number' || ref === 'boolean') {
        return ObjectUtil.shallow_clone(map);
      } else {
        new_map = {};
        for (k in map) {
          v = map[k];
          new_map[k] = ObjectUtil.deep_clone(v);
        }
        return new_map;
      }
    };

    ObjectUtil.object_array_to_map = function(array, key_field, options) {
      var duplicates, elt, i, key, len, map, ref, ref1, xform;
      if (options == null) {
        options = {};
      }
      xform = (ref = options != null ? options.transform : void 0) != null ? ref : (function(x) {
        return x;
      });
      duplicates = (ref1 = options != null ? options.duplicates : void 0) != null ? ref1 : "overwrite";
      if (duplicates !== "overwrite" && duplicates !== "stack" && duplicates !== "merge" && duplicates !== "skip") {
        throw new Error("Unrecognized value for duplicates option. Found \"" + duplicates + "\". Expected \"overwrite\", \"stack\", \"skip\", \"merge\" or null.");
      }
      map = {};
      for (i = 0, len = array.length; i < len; i++) {
        elt = array[i];
        key = xform(elt[key_field]);
        if ((map[key] != null) && duplicates !== "overwrite") {
          if (duplicates === 'stack') {
            if (Array.isArray(map[key])) {
              map[key].push(elt);
            } else {
              map[key] = [map[key], elt];
            }
          } else if (duplicates === 'merge') {
            map[key] = ObjectUtil.merge(map[key], elt);
          }
        } else {
          map[key] = elt;
        }
      }
      return map;
    };

    return ObjectUtil;

  })();

  MapUtil = (function() {
    function MapUtil() {}

    MapUtil._deprecation_warned = false;

    MapUtil._deprecation_warning = function() {
      if (!MapUtil._deprecation_warned) {
        console.error("WARNING: MapUtil is deprecated. Please use ObjectUtil instead.");
        return MapUtil._deprecation_warned = true;
      }
    };

    MapUtil._deprecated_wrapper = function(method) {
      return function() {
        var args;
        args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
        MapUtil._deprecation_warning();
        return method.call.apply(method, [ObjectUtil].concat(slice.call(args)));
      };
    };

    MapUtil.remove_null = MapUtil._deprecated_wrapper(ObjectUtil.remove_null);

    MapUtil.remove_falsey = MapUtil._deprecated_wrapper(ObjectUtil.remove_falsey);

    MapUtil.merge = MapUtil._deprecated_wrapper(ObjectUtil.merge);

    MapUtil.shallow_clone = MapUtil._deprecated_wrapper(ObjectUtil.shallow_clone);

    MapUtil.deep_clone = MapUtil._deprecated_wrapper(ObjectUtil.deep_clone);

    MapUtil.object_array_to_map = MapUtil._deprecated_wrapper(ObjectUtil.object_array_to_map);

    return MapUtil;

  })();

  exports.ObjectUtil = ObjectUtil;

  exports.MapUtil = MapUtil;

}).call(this);
